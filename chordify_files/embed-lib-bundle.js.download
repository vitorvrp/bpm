( () => {
    "use strict";
    var e, t, r, o = {
        1: (e, t, r) => {
            var o = r(5578)
              , i = r(7255)
              , s = r(5755)
              , n = r(1866)
              , a = r(6029)
              , d = r(5022)
              , h = o.Symbol
              , c = i("wks")
              , l = d ? h.for || h : h && h.withoutSetter || n;
            e.exports = function(e) {
                return s(c, e) || (c[e] = a && s(h, e) ? h[e] : l("Symbol." + e)),
                c[e]
            }
        }
        ,
        164: (e, t, r) => {
            var o = r(7914)
              , i = r(4762)
              , s = r(6261)
              , n = r(4066)
              , a = URLSearchParams
              , d = a.prototype
              , h = i(d.getAll)
              , c = i(d.has)
              , l = new a("a=1");
            !l.has("a", 2) && l.has("a", void 0) || o(d, "has", (function(e) {
                var t = arguments.length
                  , r = t < 2 ? void 0 : arguments[1];
                if (t && void 0 === r)
                    return c(this, e);
                var o = h(this, e);
                n(t, 1);
                for (var i = s(r), a = 0; a < o.length; )
                    if (o[a++] === i)
                        return !0;
                return !1
            }
            ), {
                enumerable: !0,
                unsafe: !0
            })
        }
        ,
        169: (e, t, r) => {
            var o = r(4762)
              , i = r(8473)
              , s = r(1483)
              , n = r(5755)
              , a = r(382)
              , d = r(2048).CONFIGURABLE
              , h = r(7268)
              , c = r(4483)
              , l = c.enforce
              , u = c.get
              , p = String
              , f = Object.defineProperty
              , m = o("".slice)
              , y = o("".replace)
              , g = o([].join)
              , v = a && !i((function() {
                return 8 !== f((function() {}
                ), "length", {
                    value: 8
                }).length
            }
            ))
              , C = String(String).split("String")
              , b = e.exports = function(e, t, r) {
                "Symbol(" === m(p(t), 0, 7) && (t = "[" + y(p(t), /^Symbol\(([^)]*)\).*$/, "$1") + "]"),
                r && r.getter && (t = "get " + t),
                r && r.setter && (t = "set " + t),
                (!n(e, "name") || d && e.name !== t) && (a ? f(e, "name", {
                    value: t,
                    configurable: !0
                }) : e.name = t),
                v && r && n(r, "arity") && e.length !== r.arity && f(e, "length", {
                    value: r.arity
                });
                try {
                    r && n(r, "constructor") && r.constructor ? a && f(e, "prototype", {
                        writable: !1
                    }) : e.prototype && (e.prototype = void 0)
                } catch (e) {}
                var o = l(e);
                return n(o, "source") || (o.source = g(C, "string" == typeof t ? t : "")),
                e
            }
            ;
            Function.prototype.toString = b((function() {
                return s(this) && u(this).source || h(this)
            }
            ), "toString")
        }
        ,
        274: (e, t, r) => {
            var o = r(8473);
            e.exports = !o((function() {
                var e = function() {}
                .bind();
                return "function" != typeof e || e.hasOwnProperty("prototype")
            }
            ))
        }
        ,
        348: (e, t, r) => {
            var o = r(1807)
              , i = r(1483)
              , s = r(1704)
              , n = TypeError;
            e.exports = function(e, t) {
                var r, a;
                if ("string" === t && i(r = e.toString) && !s(a = o(r, e)))
                    return a;
                if (i(r = e.valueOf) && !s(a = o(r, e)))
                    return a;
                if ("string" !== t && i(r = e.toString) && !s(a = o(r, e)))
                    return a;
                throw new n("Can't convert object to primitive value")
            }
        }
        ,
        382: (e, t, r) => {
            var o = r(8473);
            e.exports = !o((function() {
                return 7 !== Object.defineProperty({}, 1, {
                    get: function() {
                        return 7
                    }
                })[1]
            }
            ))
        }
        ,
        1091: e => {
            var t = TypeError;
            e.exports = function(e) {
                if (e > 9007199254740991)
                    throw t("Maximum allowed index exceeded");
                return e
            }
        }
        ,
        1201: (e, t, r) => {
            r.d(t, {
                C5: () => i,
                HP: () => o,
                eF: () => n,
                lC: () => a,
                pO: () => s
            });
            const o = {
                maj: [["A", "#"], ["Bb", "b"], ["B", "#"], ["C", "#"], ["Db", "b"], ["D", "#"], ["Eb", "b"], ["E", "#"], ["F", "b"], ["F#", "#"], ["G", "#"], ["Ab", "b"]],
                min: [["A", "#"], ["Bb", "b"], ["B", "#"], ["C", "b"], ["C#", "#"], ["D", "b"], ["Eb", "b"], ["E", "#"], ["F", "b"], ["F#", "#"], ["G", "b"], ["G#", "#"]]
            }
              , i = {
                b: ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"],
                "#": ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]
            }
              , s = {
                latInverse: {
                    Do: "C",
                    Re: "D",
                    Mi: "E",
                    Fa: "F",
                    Sol: "G",
                    La: "A",
                    Si: "B",
                    N: "N",
					V: "V"
                },
                latin: {
                    C: "Do",
                    D: "Re",
                    E: "Mi",
                    F: "Fa",
                    G: "Sol",
                    A: "La",
                    B: "Si",
                    N: "N",
					V: "V"
                }
            }
              , n = function() {
                const e = {
                    min: {},
                    maj: {}
                };
                for (let t = 0; t < o.min.length; t++)
                    e.min[o.min[t][0]] = t,
                    e.maj[o.maj[t][0]] = t;
                return e
            }()
              , a = function() {
                const e = {};
                for (let t = 0; t < i.b.length; t++)
                    e[i.b[t]] = t,
                    e[i["#"][t]] = t;
                return e
            }()
        }
        ,
        1278: (e, t, r) => {
            var o = r(4762)
              , i = o({}.toString)
              , s = o("".slice);
            e.exports = function(e) {
                return s(i(e), 8, -1)
            }
        }
        ,
        1279: (e, t, r) => {
            var o = r(382)
              , i = r(4762)
              , s = r(3864)
              , n = URLSearchParams.prototype
              , a = i(n.forEach);
            o && !("size"in n) && s(n, "size", {
                get: function() {
                    var e = 0;
                    return a(this, (function() {
                        e++
                    }
                    )),
                    e
                },
                configurable: !0,
                enumerable: !0
            })
        }
        ,
        1409: (e, t, r) => {
            var o = r(5578)
              , i = r(1483);
            e.exports = function(e, t) {
                return arguments.length < 2 ? (r = o[e],
                i(r) ? r : void 0) : o[e] && o[e][t];
                var r
            }
        }
        ,
        1423: (e, t, r) => {
            var o = r(1409)
              , i = r(1483)
              , s = r(4815)
              , n = r(5022)
              , a = Object;
            e.exports = n ? function(e) {
                return "symbol" == typeof e
            }
            : function(e) {
                var t = o("Symbol");
                return i(t) && s(t.prototype, a(e))
            }
        }
        ,
        1483: e => {
            var t = "object" == typeof document && document.all;
            e.exports = void 0 === t && void 0 !== t ? function(e) {
                return "function" == typeof e || e === t
            }
            : function(e) {
                return "function" == typeof e
            }
        }
        ,
        1507: e => {
            e.exports = {}
        }
        ,
        1632: (e, t, r) => {
            r.d(t, {
                G: () => o
            });
            const o = new Map([["min", "ₘ"], ["maj", ""], ["dim", "ᵈⁱᵐ"], ["aug", "ᵃᵘᶢ"], ["maj7", "ᵐᵃʲ⁷"], ["min7", "ₘ⁷"], ["hdim7", "ₘ⁷𝄬⁵"], ["dim7", "ᵈⁱᵐ⁷"], ["minmaj7", "ₘᵐᵃʲ⁷"], ["aug7", "ᵃᵘᶢ⁷"], ["maj6", "⁶"], ["min6", "ₘ⁶"], ["maj9", "ᵐᵃʲ⁹"], ["min9", "ₘ⁹"], ["9", "⁹"], ["min11", "ₘ¹¹"], ["min13", "ₘ¹³"], ["maj13", "ᵐᵃʲ¹³"], ["sus4", "ˢᵘˢ⁴"], ["sus2", "ˢᵘˢ²"], ["7sus4", "⁷ˢᵘˢ⁴"], ["7(#9)", "⁷𝄰⁹"], ["7", "⁷"], ["5", "⁵"], ["11", "¹¹"], ["13", "¹³"], ["1", "¹"], ["b", "♭"], ["#", "♯"], ["add", "ᵃᵈᵈ"], ["no", "ⁿᵒ"], ["(", "⁽"], ["(", "⁾"], [",", "˒"], ["V", "𝄽"], ["N", "𝄽"], ["/", "/"]])
        }
        ,
        1635: (e, t, r) => {
            function o(e) {
                return [...e.parentNode?.children ?? []].indexOf(e)
            }
            function i(e, ...t) {
                if (e)
                    return e instanceof HTMLCollection || e instanceof NodeList ? [...e].forEach((e => e.classList.add(...t))) : void e.forEach((e => e.classList.add(...t)))
            }
            function s(e, ...t) {
                if (e)
                    return e instanceof HTMLCollection || e instanceof NodeList ? [...e].forEach((e => e.classList.remove(...t))) : void e.forEach((e => e.classList.remove(...t)))
            }
            function n(e) {
                const t = e.getBoundingClientRect()
                  , r = document.documentElement;
                return {
                    top: t.top + window.scrollY - r.clientTop,
                    left: t.left + window.scrollX - r.clientLeft
                }
            }
            function a(e) {
                if (!(e instanceof HTMLElement))
                    throw new TypeError(`Expected ${e} to be HTMLElement`)
            }
            r.d(t, {
                Aq: () => s,
                Gn: () => a,
                cL: () => o,
                cY: () => n,
                on: () => i
            })
        }
        ,
        1703: e => {
            var t = Math.ceil
              , r = Math.floor;
            e.exports = Math.trunc || function(e) {
                var o = +e;
                return (o > 0 ? r : t)(o)
            }
        }
        ,
        1704: (e, t, r) => {
            var o = r(1483);
            e.exports = function(e) {
                return "object" == typeof e ? null !== e : o(e)
            }
        }
        ,
        1799: (e, t, r) => {
            var o = r(382)
              , i = r(8473)
              , s = r(3145);
            e.exports = !o && !i((function() {
                return 7 !== Object.defineProperty(s("div"), "a", {
                    get: function() {
                        return 7
                    }
                }).a
            }
            ))
        }
        ,
        1807: (e, t, r) => {
            var o = r(274)
              , i = Function.prototype.call;
            e.exports = o ? i.bind(i) : function() {
                return i.apply(i, arguments)
            }
        }
        ,
        1831: (e, t, r) => {
            var o = r(9557)
              , i = r(5578)
              , s = r(2095)
              , n = "__core-js_shared__"
              , a = e.exports = i[n] || s(n, {});
            (a.versions || (a.versions = [])).push({
                version: "3.41.0",
                mode: o ? "pure" : "global",
                copyright: "© 2014-2025 Denis Pushkarev (zloirock.ru)",
                license: "https://github.com/zloirock/core-js/blob/v3.41.0/LICENSE",
                source: "https://github.com/zloirock/core-js"
            })
        }
        ,
        1866: (e, t, r) => {
            var o = r(4762)
              , i = 0
              , s = Math.random()
              , n = o(1..toString);
            e.exports = function(e) {
                return "Symbol(" + (void 0 === e ? "" : e) + ")_" + n(++i + s, 36)
            }
        }
        ,
        2048: (e, t, r) => {
            var o = r(382)
              , i = r(5755)
              , s = Function.prototype
              , n = o && Object.getOwnPropertyDescriptor
              , a = i(s, "name")
              , d = a && "something" === function() {}
            .name
              , h = a && (!o || o && n(s, "name").configurable);
            e.exports = {
                EXISTS: a,
                PROPER: d,
                CONFIGURABLE: h
            }
        }
        ,
        2090: (e, t, r) => {
            r.d(t, {
                F8: () => s,
                uK: () => i
            });
            var o = r(1201);
            const i = e => {
                const t = e[0]
                  , r = e[1];
                return o.pO.latin[t] + (r ?? "")
            }
              , s = (e, t) => {
                switch (t) {
                case "english":
                    return e;
                case "german":
                    return (e => {
                        switch (e) {
                        case "Bb":
                            return "B";
                        case "B":
                            return "H";
                        default:
                            return e
                        }
                    }
                    )(e);
                case "latin":
                    return i(e)
                }
            }
        }
        ,
        2095: (e, t, r) => {
            var o = r(5578)
              , i = Object.defineProperty;
            e.exports = function(e, t) {
                try {
                    i(o, e, {
                        value: t,
                        configurable: !0,
                        writable: !0
                    })
                } catch (r) {
                    o[e] = t
                }
                return t
            }
        }
        ,
        2121: (e, t, r) => {
            var o = r(4762)
              , i = r(8473)
              , s = r(1278)
              , n = Object
              , a = o("".split);
            e.exports = i((function() {
                return !n("z").propertyIsEnumerable(0)
            }
            )) ? function(e) {
                return "String" === s(e) ? a(e, "") : n(e)
            }
            : n
        }
        ,
        2278: (e, t, r) => {
            var o = r(6742)
              , i = r(4741).concat("length", "prototype");
            t.f = Object.getOwnPropertyNames || function(e) {
                return o(e, i)
            }
        }
        ,
        2293: (e, t, r) => {
            var o = r(1704)
              , i = String
              , s = TypeError;
            e.exports = function(e) {
                if (o(e))
                    return e;
                throw new s(i(e) + " is not an object")
            }
        }
        ,
        2313: (e, t, r) => {
            r.d(t, {
                CB: () => d,
                E4: () => C,
                Ri: () => f,
                ZB: () => p,
                _G: () => n,
                qO: () => u,
                rI: () => y,
                s2: () => m,
                sG: () => c,
                vS: () => v,
                wG: () => l,
                y$: () => h
            });
            var o = r(1632)
              , i = r(1201)
              , s = r(2090);
            const n = e => {
                const t = e.split(a);
                return {
                    root: t[0],
                    extension: t[1],
                    bassNote: t[2] ? t[2] : void 0
                }
            }
              , a = /\/|:/
              , d = ({root: e, extension: t, bassNote: r}) => `${e}:${t}${void 0 !== r ? `/${r}` : ""}`
              , h = (e, t) => {
                if (e === "N" || e === "V")
    return {
        label: "𝄽"
    };
                const [r,i,n] = e.split(a)
                  , d = `${(void 0 === t || "english" === t ? r : (0,
                s.F8)(r, t)).replace("#", "♯").replace("b", "♭")}${o.G.get(i)}`;
                return void 0 === n ? {
                    label: d
                } : {
                    label: d,
                    bass: `/${(void 0 === t || "english" === t ? n : (0,
                    s.F8)(n, t)).replace("#", "♯").replace("b", "♭")}`
                }
            }
            ;
            function c(e) {
                switch (e) {
                case "guitar":
                    return "capoGuitar";
                case "mandolin":
                    return "capoMandolin";
                case "ukulele":
                    return "capoUkulele"
                }
            }
            const l = (e, t=!1, r, o) => {
                const i = h(e, r)
                  , s = document.createElement("div");
                return s.className = "chord",
                s.classList.toggle("nolabel", t),
                s.innerHTML = `<div class="label-wrapper"><span class="chord-label">${i.label}</span><span class="bass-label">${i.bass ?? ""}</span></div>`,
                s.dataset.handle = e,
                s.dataset.i = o?.toString(),
                s
            }
              , u = (e, t) => void 0 === t ? e : i.C5[t][i.lC[e]]
              , p = e => {
                if (e === "N" || e === "V")
    return e;
                const t = n(e)
                  , r = t.root[1] ?? t.bassNote?.[1];
                if (void 0 !== r) {
                    const e = "b" === r ? "#" : "b"
                      , o = u(t.root, e)
                      , i = t.bassNote
                      , s = void 0 !== i ? u(i, e) : void 0;
                    return d({
                        root: o,
                        extension: t.extension,
                        bassNote: s
                    })
                }
                return e
            }
              , f = ({extension: e, bassNote: t}) => ("maj" === e || "min" === e) && void 0 === t
              , m = (e, t) => {
                if (e === "N" || e === "V")
                    return !1;
                if ("latin" !== t)
                    return e.split("/")[0].length > 6;
                const {root: r, extension: o} = n(e);
                return (0,
                s.uK)(r).length + o.length + 1 > 6
            }
            ;
            function y(e) {
                return e.trim().split("\n").map(g)
            }
            const g = e => {
                const t = e.split(";");
                return {
                    beat: parseInt(t[0], 10),
                    from: parseFloat(t[2]),
                    handle: t[1],
                    to: parseFloat(t[3])
                }
            }
              , v = e => t => e[t]
              , C = e => t => {
                if (!t)
                    return;
                const r = t.dataset.i;
                return void 0 !== r ? v(e)(parseInt(r, 10)) : void 0
            }
        }
        ,
        2347: (e, t, r) => {
            var o = r(3312)
              , i = Object;
            e.exports = function(e) {
                return i(o(e))
            }
        }
        ,
        2355: (e, t, r) => {
            var o = r(1807)
              , i = r(1704)
              , s = r(1423)
              , n = r(2564)
              , a = r(348)
              , d = r(1)
              , h = TypeError
              , c = d("toPrimitive");
            e.exports = function(e, t) {
                if (!i(e) || s(e))
                    return e;
                var r, d = n(e, c);
                if (d) {
                    if (void 0 === t && (t = "default"),
                    r = o(d, e, t),
                    !i(r) || s(r))
                        return r;
                    throw new h("Can't convert object to primitive value")
                }
                return void 0 === t && (t = "number"),
                a(e, t)
            }
        }
        ,
        2564: (e, t, r) => {
            var o = r(8120)
              , i = r(5983);
            e.exports = function(e, t) {
                var r = e[t];
                return i(r) ? void 0 : o(r)
            }
        }
        ,
        3005: (e, t, r) => {
            var o = r(1703);
            e.exports = function(e) {
                var t = +e;
                return t != t || 0 === t ? 0 : o(t)
            }
        }
        ,
        3145: (e, t, r) => {
            var o = r(5578)
              , i = r(1704)
              , s = o.document
              , n = i(s) && i(s.createElement);
            e.exports = function(e) {
                return n ? s.createElement(e) : {}
            }
        }
        ,
        3312: (e, t, r) => {
            var o = r(5983)
              , i = TypeError;
            e.exports = function(e) {
                if (o(e))
                    throw new i("Can't call method on " + e);
                return e
            }
        }
        ,
        3392: (e, t, r) => {
            var o = r(3005)
              , i = Math.max
              , s = Math.min;
            e.exports = function(e, t) {
                var r = o(e);
                return r < 0 ? i(r + t, 0) : s(r, t)
            }
        }
        ,
        3815: (e, t, r) => {
            var o = r(2355)
              , i = r(1423);
            e.exports = function(e) {
                var t = o(e, "string");
                return i(t) ? t : t + ""
            }
        }
        ,
        3864: (e, t, r) => {
            var o = r(169)
              , i = r(5835);
            e.exports = function(e, t, r) {
                return r.get && o(r.get, t, {
                    getter: !0
                }),
                r.set && o(r.set, t, {
                    setter: !0
                }),
                i.f(e, t, r)
            }
        }
        ,
        3896: (e, t, r) => {
            var o = r(382)
              , i = r(8473);
            e.exports = o && i((function() {
                return 42 !== Object.defineProperty((function() {}
                ), "prototype", {
                    value: 42,
                    writable: !1
                }).prototype
            }
            ))
        }
        ,
        4066: e => {
            var t = TypeError;
            e.exports = function(e, r) {
                if (e < r)
                    throw new t("Not enough arguments");
                return e
            }
        }
        ,
        4338: (e, t, r) => {
            var o = {};
            o[r(1)("toStringTag")] = "z",
            e.exports = "[object z]" === String(o)
        }
        ,
        4347: (e, t) => {
            t.f = Object.getOwnPropertySymbols
        }
        ,
        4483: (e, t, r) => {
            var o, i, s, n = r(4644), a = r(5578), d = r(1704), h = r(9037), c = r(5755), l = r(1831), u = r(5409), p = r(1507), f = "Object already initialized", m = a.TypeError, y = a.WeakMap;
            if (n || l.state) {
                var g = l.state || (l.state = new y);
                g.get = g.get,
                g.has = g.has,
                g.set = g.set,
                o = function(e, t) {
                    if (g.has(e))
                        throw new m(f);
                    return t.facade = e,
                    g.set(e, t),
                    t
                }
                ,
                i = function(e) {
                    return g.get(e) || {}
                }
                ,
                s = function(e) {
                    return g.has(e)
                }
            } else {
                var v = u("state");
                p[v] = !0,
                o = function(e, t) {
                    if (c(e, v))
                        throw new m(f);
                    return t.facade = e,
                    h(e, v, t),
                    t
                }
                ,
                i = function(e) {
                    return c(e, v) ? e[v] : {}
                }
                ,
                s = function(e) {
                    return c(e, v)
                }
            }
            e.exports = {
                set: o,
                get: i,
                has: s,
                enforce: function(e) {
                    return s(e) ? i(e) : o(e, {})
                },
                getterFor: function(e) {
                    return function(t) {
                        var r;
                        if (!d(t) || (r = i(t)).type !== e)
                            throw new m("Incompatible receiver, " + e + " required");
                        return r
                    }
                }
            }
        }
        ,
        4571: (e, t, r) => {
            r.d(t, {
                LV: () => i,
                eU: () => n,
                sg: () => o,
                xb: () => a,
                yN: () => s
            });
            const o = (e, t, r) => {
                let o;
                return r ? (...r) => {
                    void 0 === o ? (e(...r),
                    o = setTimeout(( () => {
                        o = void 0
                    }
                    ), t)) : (clearTimeout(o),
                    o = setTimeout(( () => {
                        o = void 0,
                        e(...r)
                    }
                    ), t))
                }
                : (...r) => {
                    void 0 !== o && clearTimeout(o),
                    o = setTimeout(( () => {
                        o = void 0,
                        e(...r)
                    }
                    ), t)
                }
            }
              , i = (e, t, r=0) => {
                const o = Math.min(t, r)
                  , i = Math.max(t, r)
                  , s = (e - o) % (i - o + 1);
                return s >= 0 ? o + s : i + s + 1
            }
              , s = (e, t) => {
                void 0 === t && (t = location.search),
                e = e.replace(/[[]/, "\\[").replace(/[\]]/, "\\]");
                const r = new RegExp(`[\\?&]${e}=([^&#]*)`).exec(t);
                return null != r && decodeURIComponent(r[1].replace(/\+/g, " "))
            }
            ;
            function n(e, t) {
                if (null == e)
                    throw new TypeError(t ?? `Expected 'val' to be defined, but received ${e}`)
            }
            function a(e) {
                throw new TypeError("never??")
            }
            new Map
        }
        ,
        4644: (e, t, r) => {
            var o = r(5578)
              , i = r(1483)
              , s = o.WeakMap;
            e.exports = i(s) && /native code/.test(String(s))
        }
        ,
        4741: e => {
            e.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"]
        }
        ,
        4762: (e, t, r) => {
            var o = r(274)
              , i = Function.prototype
              , s = i.call
              , n = o && i.bind.bind(s, s);
            e.exports = o ? n : function(e) {
                return function() {
                    return s.apply(e, arguments)
                }
            }
        }
        ,
        4815: (e, t, r) => {
            var o = r(4762);
            e.exports = o({}.isPrototypeOf)
        }
        ,
        4914: (e, t, r) => {
            var o = r(1278);
            e.exports = Array.isArray || function(e) {
                return "Array" === o(e)
            }
        }
        ,
        4961: (e, t, r) => {
            var o = r(382)
              , i = r(1807)
              , s = r(7611)
              , n = r(7738)
              , a = r(5599)
              , d = r(3815)
              , h = r(5755)
              , c = r(1799)
              , l = Object.getOwnPropertyDescriptor;
            t.f = o ? l : function(e, t) {
                if (e = a(e),
                t = d(t),
                c)
                    try {
                        return l(e, t)
                    } catch (e) {}
                if (h(e, t))
                    return n(!i(s.f, e, t), e[t])
            }
        }
        ,
        5022: (e, t, r) => {
            var o = r(6029);
            e.exports = o && !Symbol.sham && "symbol" == typeof Symbol.iterator
        }
        ,
        5409: (e, t, r) => {
            var o = r(7255)
              , i = r(1866)
              , s = o("keys");
            e.exports = function(e) {
                return s[e] || (s[e] = i(e))
            }
        }
        ,
        5420: (e, t, r) => {
            r.d(t, {
                W: () => o,
                i: () => i
            });
            const o = e => {
                if (e < 0)
                    throw new RangeError("Midi note needs to be a positive number");
                const t = e % 12
                  , r = Math.floor(e / 12) - 1;
                return `${["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"][t]}${r}`
            }
              , i = () => {
                try {
                    return r.e(582).then(r.t.bind(r, 5582, 19))
                } catch (e) {
                    const t = e instanceof Error ? e.message : String(e);
                    throw new Error(`Failed to load notes map: ${t}`)
                }
            }
        }
        ,
        5578: function(e, t, r) {
            var o = function(e) {
                return e && e.Math === Math && e
            };
            e.exports = o("object" == typeof globalThis && globalThis) || o("object" == typeof window && window) || o("object" == typeof self && self) || o("object" == typeof r.g && r.g) || o("object" == typeof this && this) || function() {
                return this
            }() || Function("return this")()
        },
        5599: (e, t, r) => {
            var o = r(2121)
              , i = r(3312);
            e.exports = function(e) {
                return o(i(e))
            }
        }
        ,
        5673: (e, t, r) => {
            var o = r(7914)
              , i = r(4762)
              , s = r(6261)
              , n = r(4066)
              , a = URLSearchParams
              , d = a.prototype
              , h = i(d.append)
              , c = i(d.delete)
              , l = i(d.forEach)
              , u = i([].push)
              , p = new a("a=1&a=2&b=3");
            p.delete("a", 1),
            p.delete("b", void 0),
            p + "" != "a=2" && o(d, "delete", (function(e) {
                var t = arguments.length
                  , r = t < 2 ? void 0 : arguments[1];
                if (t && void 0 === r)
                    return c(this, e);
                var o = [];
                l(this, (function(e, t) {
                    u(o, {
                        key: t,
                        value: e
                    })
                }
                )),
                n(t, 1);
                for (var i, a = s(e), d = s(r), p = 0, f = 0, m = !1, y = o.length; p < y; )
                    i = o[p++],
                    m || i.key === a ? (m = !0,
                    c(this, i.key)) : f++;
                for (; f < y; )
                    (i = o[f++]).key === a && i.value === d || h(this, i.key, i.value)
            }
            ), {
                enumerable: !0,
                unsafe: !0
            })
        }
        ,
        5724: (e, t, r) => {
            var o = r(8612)
              , i = r(2347)
              , s = r(6960)
              , n = r(9273)
              , a = r(1091);
            o({
                target: "Array",
                proto: !0,
                arity: 1,
                forced: r(8473)((function() {
                    return 4294967297 !== [].push.call({
                        length: 4294967296
                    }, 1)
                }
                )) || !function() {
                    try {
                        Object.defineProperty([], "length", {
                            writable: !1
                        }).push()
                    } catch (e) {
                        return e instanceof TypeError
                    }
                }()
            }, {
                push: function(e) {
                    var t = i(this)
                      , r = s(t)
                      , o = arguments.length;
                    a(r + o);
                    for (var d = 0; d < o; d++)
                        t[r] = arguments[d],
                        r++;
                    return n(t, r),
                    r
                }
            })
        }
        ,
        5755: (e, t, r) => {
            var o = r(4762)
              , i = r(2347)
              , s = o({}.hasOwnProperty);
            e.exports = Object.hasOwn || function(e, t) {
                return s(i(e), t)
            }
        }
        ,
        5814: (e, t, r) => {
            r.d(t, {
                o: () => a
            });
            var o = r(5830);
            const i = async () => {
                const e = function() {
                    if ("undefined" == typeof Audio)
                        return null;
                    const e = new Audio
                      , t = e.canPlayType('audio/ogg; codecs="vorbis"');
                    if ("probably" === t || "maybe" === t)
                        return "ogg";
                    const r = e.canPlayType("audio/mpeg");
                    return "probably" === r || "maybe" === r ? "mp3" : null
                }();
                if (!e)
                    throw new Error("No supported audio format found");
                var t;
                return await (t = `/midi-js/examples/soundfont/acoustic_grand_piano-${e}.js`,
                new Promise(( (e, r) => {
                    const o = document.createElement("script");
                    o.src = t,
                    o.onload = () => e(),
                    o.onerror = r,
                    document.head.appendChild(o)
                }
                ))),
                window.MIDI.Soundfont.acoustic_grand_piano
            }
            ;
            var s = r(5420);
            const n = {
                Legacy: async () => {
                    const {createChordPlayer: e} = await r.e(619).then(r.bind(r, 2619));
                    return e()
                }
                ,
                ToneJS: async () => {
                    const [e,t,n] = await Promise.all([Promise.all([r.e(988), r.e(750)]).then(r.bind(r, 9750)).then((e => e.createChordPlayer)), (0,
                    s.i)(), i()])
                      , a = e((e => e in t ? t[e] : ((0,
                    o.C)(new Error(`Unknown chord or note: ${e}`)),
                    [])), n);
                    return await a.init(),
                    a
                }
            }
              , a = async e => {
                try {
                    return await n[e]()
                } catch (e) {
                    const t = e instanceof Error ? e.message : String(e);
                    throw new Error(`Failed to create chord player: ${t}`)
                }
            }
        }
        ,
        5830: (e, t, r) => {
            function o(e, t) {
                const r = globalThis.Sentry;
                r && e instanceof Error ? r.captureException(e, t) : console.error(...arguments)
            }
            function i(e, t) {
                const r = globalThis.Sentry;
                r?.configureScope((r => {
                    r.setContext(e, t)
                }
                ))
            }
            r.d(t, {
                C: () => o,
                I: () => i
            })
        }
        ,
        5835: (e, t, r) => {
            var o = r(382)
              , i = r(1799)
              , s = r(3896)
              , n = r(2293)
              , a = r(3815)
              , d = TypeError
              , h = Object.defineProperty
              , c = Object.getOwnPropertyDescriptor
              , l = "enumerable"
              , u = "configurable"
              , p = "writable";
            t.f = o ? s ? function(e, t, r) {
                if (n(e),
                t = a(t),
                n(r),
                "function" == typeof e && "prototype" === t && "value"in r && p in r && !r[p]) {
                    var o = c(e, t);
                    o && o[p] && (e[t] = r.value,
                    r = {
                        configurable: u in r ? r[u] : o[u],
                        enumerable: l in r ? r[l] : o[l],
                        writable: !1
                    })
                }
                return h(e, t, r)
            }
            : h : function(e, t, r) {
                if (n(e),
                t = a(t),
                n(r),
                i)
                    try {
                        return h(e, t, r)
                    } catch (e) {}
                if ("get"in r || "set"in r)
                    throw new d("Accessors not supported");
                return "value"in r && (e[t] = r.value),
                e
            }
        }
        ,
        5983: e => {
            e.exports = function(e) {
                return null == e
            }
        }
        ,
        6029: (e, t, r) => {
            var o = r(6477)
              , i = r(8473)
              , s = r(5578).String;
            e.exports = !!Object.getOwnPropertySymbols && !i((function() {
                var e = Symbol("symbol detection");
                return !s(e) || !(Object(e)instanceof Symbol) || !Symbol.sham && o && o < 41
            }
            ))
        }
        ,
        6145: (e, t, r) => {
            var o = r(4338)
              , i = r(1483)
              , s = r(1278)
              , n = r(1)("toStringTag")
              , a = Object
              , d = "Arguments" === s(function() {
                return arguments
            }());
            e.exports = o ? s : function(e) {
                var t, r, o;
                return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (r = function(e, t) {
                    try {
                        return e[t]
                    } catch (e) {}
                }(t = a(e), n)) ? r : d ? s(t) : "Object" === (o = s(t)) && i(t.callee) ? "Arguments" : o
            }
        }
        ,
        6261: (e, t, r) => {
            var o = r(6145)
              , i = String;
            e.exports = function(e) {
                if ("Symbol" === o(e))
                    throw new TypeError("Cannot convert a Symbol value to a string");
                return i(e)
            }
        }
        ,
        6477: (e, t, r) => {
            var o, i, s = r(5578), n = r(9461), a = s.process, d = s.Deno, h = a && a.versions || d && d.version, c = h && h.v8;
            c && (i = (o = c.split("."))[0] > 0 && o[0] < 4 ? 1 : +(o[0] + o[1])),
            !i && n && (!(o = n.match(/Edge\/(\d+)/)) || o[1] >= 74) && (o = n.match(/Chrome\/(\d+)/)) && (i = +o[1]),
            e.exports = i
        }
        ,
        6651: (e, t, r) => {
            var o = r(5599)
              , i = r(3392)
              , s = r(6960)
              , n = function(e) {
                return function(t, r, n) {
                    var a = o(t)
                      , d = s(a);
                    if (0 === d)
                        return !e && -1;
                    var h, c = i(n, d);
                    if (e && r != r) {
                        for (; d > c; )
                            if ((h = a[c++]) != h)
                                return !0
                    } else
                        for (; d > c; c++)
                            if ((e || c in a) && a[c] === r)
                                return e || c || 0;
                    return !e && -1
                }
            };
            e.exports = {
                includes: n(!0),
                indexOf: n(!1)
            }
        }
        ,
        6726: (e, t, r) => {
            var o = r(5755)
              , i = r(9497)
              , s = r(4961)
              , n = r(5835);
            e.exports = function(e, t, r) {
                for (var a = i(t), d = n.f, h = s.f, c = 0; c < a.length; c++) {
                    var l = a[c];
                    o(e, l) || r && o(r, l) || d(e, l, h(t, l))
                }
            }
        }
        ,
        6742: (e, t, r) => {
            var o = r(4762)
              , i = r(5755)
              , s = r(5599)
              , n = r(6651).indexOf
              , a = r(1507)
              , d = o([].push);
            e.exports = function(e, t) {
                var r, o = s(e), h = 0, c = [];
                for (r in o)
                    !i(a, r) && i(o, r) && d(c, r);
                for (; t.length > h; )
                    i(o, r = t[h++]) && (~n(c, r) || d(c, r));
                return c
            }
        }
        ,
        6960: (e, t, r) => {
            var o = r(8324);
            e.exports = function(e) {
                return o(e.length)
            }
        }
        ,
        7255: (e, t, r) => {
            var o = r(1831);
            e.exports = function(e, t) {
                return o[e] || (o[e] = t || {})
            }
        }
        ,
        7268: (e, t, r) => {
            var o = r(4762)
              , i = r(1483)
              , s = r(1831)
              , n = o(Function.toString);
            i(s.inspectSource) || (s.inspectSource = function(e) {
                return n(e)
            }
            ),
            e.exports = s.inspectSource
        }
        ,
        7611: (e, t) => {
            var r = {}.propertyIsEnumerable
              , o = Object.getOwnPropertyDescriptor
              , i = o && !r.call({
                1: 2
            }, 1);
            t.f = i ? function(e) {
                var t = o(this, e);
                return !!t && t.enumerable
            }
            : r
        }
        ,
        7738: e => {
            e.exports = function(e, t) {
                return {
                    enumerable: !(1 & e),
                    configurable: !(2 & e),
                    writable: !(4 & e),
                    value: t
                }
            }
        }
        ,
        7914: (e, t, r) => {
            var o = r(1483)
              , i = r(5835)
              , s = r(169)
              , n = r(2095);
            e.exports = function(e, t, r, a) {
                a || (a = {});
                var d = a.enumerable
                  , h = void 0 !== a.name ? a.name : t;
                if (o(r) && s(r, h, a),
                a.global)
                    d ? e[t] = r : n(t, r);
                else {
                    try {
                        a.unsafe ? e[t] && (d = !0) : delete e[t]
                    } catch (e) {}
                    d ? e[t] = r : i.f(e, t, {
                        value: r,
                        enumerable: !1,
                        configurable: !a.nonConfigurable,
                        writable: !a.nonWritable
                    })
                }
                return e
            }
        }
        ,
        8028: (e, t, r) => {
            function o(e) {
                const t = (decodeURIComponent(window.document.cookie).split("; ").filter((t => t.split("=")[0] === e))[0] || "").split("=")[1];
                return "" !== t ? t : void 0
            }
            r.d(t, {
                Ri: () => o,
                Yj: () => i
            });
            const i = e => function(e, t, r=1440) {
                const o = new Date;
                return o.setTime(o.getTime() + 6e4 * r),
                window.document.cookie = `${e}=${t}; expires=${o.toUTCString()}; path=/; secure`,
                !0
            }(e, "", -1)
        }
        ,
        8120: (e, t, r) => {
            var o = r(1483)
              , i = r(8761)
              , s = TypeError;
            e.exports = function(e) {
                if (o(e))
                    return e;
                throw new s(i(e) + " is not a function")
            }
        }
        ,
        8324: (e, t, r) => {
            var o = r(3005)
              , i = Math.min;
            e.exports = function(e) {
                var t = o(e);
                return t > 0 ? i(t, 9007199254740991) : 0
            }
        }
        ,
        8473: e => {
            e.exports = function(e) {
                try {
                    return !!e()
                } catch (e) {
                    return !0
                }
            }
        }
        ,
        8612: (e, t, r) => {
            var o = r(5578)
              , i = r(4961).f
              , s = r(9037)
              , n = r(7914)
              , a = r(2095)
              , d = r(6726)
              , h = r(8730);
            e.exports = function(e, t) {
                var r, c, l, u, p, f = e.target, m = e.global, y = e.stat;
                if (r = m ? o : y ? o[f] || a(f, {}) : o[f] && o[f].prototype)
                    for (c in t) {
                        if (u = t[c],
                        l = e.dontCallGetSet ? (p = i(r, c)) && p.value : r[c],
                        !h(m ? c : f + (y ? "." : "#") + c, e.forced) && void 0 !== l) {
                            if (typeof u == typeof l)
                                continue;
                            d(u, l)
                        }
                        (e.sham || l && l.sham) && s(u, "sham", !0),
                        n(r, c, u, e)
                    }
            }
        }
        ,
        8649: (e, t, r) => {
            r.d(t, {
                Y: () => i
            });
            var o = r(2313);
            const i = e => {
                function t(t) {
    if (!t.detail.chordChange || !Chordify.chordsLoaded)
        return;

    const { chordEl: r, source: i } = t.detail.chordChange;
    const s = (0, o.E4)(Chordify.song.chords)(r);
    let n = s?.handleParts;

    if (
        s !== void 0 &&
        n !== void 0 &&
        !["N", "V"].includes(s.handle) &&
        (
            (i === "pulse" && r.classList.contains("nolabel")) ||
            (
                Chordify.isPremium &&
                (n = Chordify.premium.getCompensatedSoundHandle(n))
            )
        )
    ) {
        e.play(n);
    }
}

return window.document.addEventListener("ChordifyLibrary", t),
    () => {
        window.document.removeEventListener("ChordifyLibrary", t)
    }

            }
        }
        ,
        8730: (e, t, r) => {
    var o = r(8473)
      , i = r(1483)
      , s = /#|\.prototype\./
      , n = function(e, t) {
        var r = d[a(e)];
        return r === c || !["N", "V"].includes(r) && (i(t) ? o(t) : !!t)
    }
      , a = n.normalize = function(e) {
        return String(e).replace(s, ".").toLowerCase()
    }
      , d = n.data = {}
      , h = n.NATIVE = "N"
      , c = n.POLYFILL = "P";
    e.exports = n
}
        ,
        8761: e => {
            var t = String;
            e.exports = function(e) {
                try {
                    return t(e)
                } catch (e) {
                    return "Object"
                }
            }
        }
        ,
        9037: (e, t, r) => {
            var o = r(382)
              , i = r(5835)
              , s = r(7738);
            e.exports = o ? function(e, t, r) {
                return i.f(e, t, s(1, r))
            }
            : function(e, t, r) {
                return e[t] = r,
                e
            }
        }
        ,
        9273: (e, t, r) => {
            var o = r(382)
              , i = r(4914)
              , s = TypeError
              , n = Object.getOwnPropertyDescriptor
              , a = o && !function() {
                if (void 0 !== this)
                    return !0;
                try {
                    Object.defineProperty([], "length", {
                        writable: !1
                    }).length = 1
                } catch (e) {
                    return e instanceof TypeError
                }
            }();
            e.exports = a ? function(e, t) {
                if (i(e) && !n(e, "length").writable)
                    throw new s("Cannot set read only .length");
                return e.length = t
            }
            : function(e, t) {
                return e.length = t
            }
        }
        ,
        9461: (e, t, r) => {
            var o = r(5578).navigator
              , i = o && o.userAgent;
            e.exports = i ? String(i) : ""
        }
        ,
        9497: (e, t, r) => {
            var o = r(1409)
              , i = r(4762)
              , s = r(2278)
              , n = r(4347)
              , a = r(2293)
              , d = i([].concat);
            e.exports = o("Reflect", "ownKeys") || function(e) {
                var t = s.f(a(e))
                  , r = n.f;
                return r ? d(t, r(e)) : t
            }
        }
        ,
        9557: e => {
            e.exports = !1
        }
    }, i = {};
    function s(e) {
        var t = i[e];
        if (void 0 !== t)
            return t.exports;
        var r = i[e] = {
            exports: {}
        };
        return o[e].call(r.exports, r, r.exports, s),
        r.exports
    }
    s.m = o,
    s.n = e => {
        var t = e && e.__esModule ? () => e.default : () => e;
        return s.d(t, {
            a: t
        }),
        t
    }
    ,
    t = Object.getPrototypeOf ? e => Object.getPrototypeOf(e) : e => e.__proto__,
    s.t = function(r, o) {
        if (1 & o && (r = this(r)),
        8 & o)
            return r;
        if ("object" == typeof r && r) {
            if (4 & o && r.__esModule)
                return r;
            if (16 & o && "function" == typeof r.then)
                return r
        }
        var i = Object.create(null);
        s.r(i);
        var n = {};
        e = e || [null, t({}), t([]), t(t)];
        for (var a = 2 & o && r; "object" == typeof a && !~e.indexOf(a); a = t(a))
            Object.getOwnPropertyNames(a).forEach((e => n[e] = () => r[e]));
        return n.default = () => r,
        s.d(i, n),
        i
    }
    ,
    s.d = (e, t) => {
        for (var r in t)
            s.o(t, r) && !s.o(e, r) && Object.defineProperty(e, r, {
                enumerable: !0,
                get: t[r]
            })
    }
    ,
    s.f = {},
    s.e = e => Promise.all(Object.keys(s.f).reduce(( (t, r) => (s.f[r](e, t),
    t)), [])),
    s.u = e => e + "-lib-chunk." + {
        472: "009e19d0f85330bb0158",
        582: "fd6ce8a8acb9982922ce",
        619: "65323caa2d5593dc7f70",
        750: "92f674d9d447385bbad8",
        988: "c92cec55b206d96f4753"
    }[e] + ".js",
    s.g = function() {
        if ("object" == typeof globalThis)
            return globalThis;
        try {
            return this || new Function("return this")()
        } catch (e) {
            if ("object" == typeof window)
                return window
        }
    }(),
    s.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t),
    r = {},
    s.l = (e, t, o, i) => {
        if (r[e])
            r[e].push(t);
        else {
            var n, a;
            if (void 0 !== o)
                for (var d = document.getElementsByTagName("script"), h = 0; h < d.length; h++) {
                    var c = d[h];
                    if (c.getAttribute("src") == e) {
                        n = c;
                        break
                    }
                }
            n || (a = !0,
            (n = document.createElement("script")).charset = "utf-8",
            n.timeout = 120,
            s.nc && n.setAttribute("nonce", s.nc),
            n.src = e),
            r[e] = [t];
            var l = (t, o) => {
                n.onerror = n.onload = null,
                clearTimeout(u);
                var i = r[e];
                if (delete r[e],
                n.parentNode && n.parentNode.removeChild(n),
                i && i.forEach((e => e(o))),
                t)
                    return t(o)
            }
              , u = setTimeout(l.bind(null, void 0, {
                type: "timeout",
                target: n
            }), 12e4);
            n.onerror = l.bind(null, n.onerror),
            n.onload = l.bind(null, n.onload),
            a && document.head.appendChild(n)
        }
    }
    ,
    s.r = e => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
        }),
        Object.defineProperty(e, "__esModule", {
            value: !0
        })
    }
    ,
    ( () => {
        var e;
        s.g.importScripts && (e = s.g.location + "");
        var t = s.g.document;
        if (!e && t && (t.currentScript && "SCRIPT" === t.currentScript.tagName.toUpperCase() && (e = t.currentScript.src),
        !e)) {
            var r = t.getElementsByTagName("script");
            if (r.length)
                for (var o = r.length - 1; o > -1 && (!e || !/^http(s?):/.test(e)); )
                    e = r[o--].src
        }
        if (!e)
            throw new Error("Automatic publicPath is not supported in this browser");
        e = e.replace(/^blob:/, "").replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/"),
        s.p = e
    }
    )(),
    ( () => {
        var e = {
            348: 0,
            722: 0
        };
        s.f.j = (t, r) => {
            var o = s.o(e, t) ? e[t] : void 0;
            if (0 !== o)
                if (o)
                    r.push(o[2]);
                else {
                    var i = new Promise(( (r, i) => o = e[t] = [r, i]));
                    r.push(o[2] = i);
                    var n = s.p + s.u(t)
                      , a = new Error;
                    s.l(n, (r => {
                        if (s.o(e, t) && (0 !== (o = e[t]) && (e[t] = void 0),
                        o)) {
                            var i = r && ("load" === r.type ? "missing" : r.type)
                              , n = r && r.target && r.target.src;
                            a.message = "Loading chunk " + t + " failed.\n(" + i + ": " + n + ")",
                            a.name = "ChunkLoadError",
                            a.type = i,
                            a.request = n,
                            o[1](a)
                        }
                    }
                    ), "chunk-" + t, t)
                }
        }
        ;
        var t = (t, r) => {
            var o, i, [n,a,d] = r, h = 0;
            if (n.some((t => 0 !== e[t]))) {
                for (o in a)
                    s.o(a, o) && (s.m[o] = a[o]);
                d && d(s)
            }
            for (t && t(r); h < n.length; h++)
                i = n[h],
                s.o(e, i) && e[i] && e[i][0](),
                e[i] = 0
        }
          , r = globalThis.webpackChunk = globalThis.webpackChunk || [];
        r.forEach(t.bind(null, 0)),
        r.push = t.bind(null, r.push.bind(r))
    }
    )(),
    ( () => {
        s(5724);
        var e = s(2313)
          , t = s(1635);
        class r {
            constructor(t, r, o, i) {
                this.beat = t.beat,
                this.from = t.from,
                this.to = t.to,
                this.idx = r,
                this.handle = t.handle,
                this.hidden = o,
               this.handleParts = void 0 !== i ? i : ["N", "V"].includes(this.handle) ? void 0 : (0,
                e._G)(this.handle);

                this.checkOverflow = this.checkOverflow.bind(this),
                this.getEnharmonic = this.getEnharmonic.bind(this),
                this.getLeft = this.getLeft.bind(this),
                this.getTop = this.getTop.bind(this),
                this.getViewHandle = this.getViewHandle.bind(this),
                this.isRest = this.isRest.bind(this),
                this.isLastOnRow = this.isLastOnRow.bind(this),
                this.isSimple = this.isSimple.bind(this),
                this.setHandle = this.setHandle.bind(this),
                this.setHidden = this.setHidden.bind(this),
                this.updateLabel = this.updateLabel.bind(this);
                const s = this.getViewHandle();
                this.currentViewHandle = s,
                this.el = (0,
                e.wG)(s, o, Chordify.chordLang, r),
                this.labels = this.el.children[0].children
            }
            checkOverflow() {
                if (void 0 === Chordify.song?.chords)
                    return console.error(new Error("Chordify.song missing"));
                if (void 0 === this.handleParts?.bassNote)
                    return;
                const t = (0,
                e.vS)(Chordify.song.chords)(this.idx - 1)
                  , r = this.overflow;
                if (this.el.classList.remove("hidden-overflow"),
                this.hidden && t && t.overflow)
                    this.overflow = !0;
                else if (this.hidden)
                    this.overflow = !1;
                else {
                    if ("" === window.getComputedStyle(this.labels[1], ":before").content)
                        return;
                    {
                        const e = this.el.getBoundingClientRect().width;
                        if (void 0 === e)
                            return console.error("elWidth missing");
                        this.overflow = this.labels[0].offsetWidth + this.labels[1].offsetWidth > e
                    }
                }
                if (this.overflow) {
                    const t = (0,
                    e.vS)(Chordify.song.chords)(this.idx + 1)
                      , r = void 0 !== t && t.hidden;
                    this.el.classList.toggle("hidden-overflow", this.isLastOnRow() || !r)
                }
                r !== this.overflow && this.el.classList.toggle("overflow", this.overflow)
            }
            getEnharmonic() {
                return (0,
                e.ZB)(this.handle)
            }
            getViewHandle() {
                if (void 0 === this.handleParts)
                    return "N";
                const t = {
                    root: (0,
                    e.qO)(this.handleParts.root, Chordify.song?.accidental),
                    extension: this.handleParts.extension,
                    bassNote: void 0 !== this.handleParts.bassNote ? (0,
                    e.qO)(this.handleParts.bassNote, Chordify.song?.accidental) : void 0
                };
                if (Chordify.isPremium) {
                    const r = Chordify.premium.getCompensatedViewHandle(t);
                    return (0,
                    e.CB)(r)
                }
                return (0,
                e.CB)(t)
            }
            getLeft() {
                return this.left = this.left ?? (0,
                t.cY)(this.el).left,
                this.left
            }
            getTop() {
                return this.top = this.top ?? (0,
                t.cY)(this.el).top,
                this.top
            }
            isLastOnRow() {
                if (void 0 === Chordify.song?.chords)
                    throw new Error("song.chords missing");
                const t = (0,
                e.vS)(Chordify.song.chords)(this.idx + 1);
                return void 0 === t || !Chordify.diagramsVisible && t.getTop() !== this.getTop()
            }
            isRest() {
                return "N" === this.handle
            }
            isSimple() {
                return "N" === this.handle || void 0 !== this.handleParts && (0,
                e.Ri)(this.handleParts)
            }
            setHandle(t, r) {
                this.handle !== t && (this.handle = t,
                this.handleParts = "N" === t ? void 0 : (0,
                e._G)(t),
                this.el.dataset.handle = t,
                this.updateLabel()),
                void 0 !== r && this.setHidden(r)
            }
            setHidden(e) {
                this.hidden = e,
                this.el.classList.toggle("nolabel", e)
            }
            updateLabel() {
                const t = this.getViewHandle();
                if (t === this.currentViewHandle)
                    return;
                this.currentViewHandle = t;
                const r = (0,
                e.y$)(t, Chordify.chordLang);
                this.labels[0].innerHTML = r.label,
                void 0 !== r.bass ? (this.labels[1].innerHTML = r.bass,
                setTimeout(this.checkOverflow, 0)) : (this.labels[1].innerHTML = "",
                this.overflow && (this.el.classList.remove("overflow", "hidden-overflow"),
                this.overflow = !1))
            }
        }
        var o = s(4571);
        class i {
            currentTime = 0;
            isReady = !1;
            speeds = {};
            state = "stopped";
            constructor(e) {
                this.events = {},
                this.type = e
            }
            on = (e, t) => (void 0 === this.events[e] && (this.events[e] = []),
            this.events[e].push(t),
            () => {
                this.events[e] = this.events[e].filter((e => e !== t))
            }
            );
            fire = e => {
                for (const t in this.events[e.name])
                    this.events[e.name][t] && this.events[e.name][t](e)
            }
        }
        class n extends i {
            offset = 0;
            isTweening = !1;
            constructor(e, t) {
                super(e),
                this.speeds = {
                    "-5": .5,
                    "-4": .6,
                    "-3": .7,
                    "-2": .8,
                    "-1": .9,
                    0: 1,
                    1: 1.1,
                    2: 1.2,
                    3: 1.3,
                    4: 1.4,
                    5: 1.5
                },
                this.streamUrl = a(e, t)
            }
            initialize() {
                this.initializeHowler()
            }
            async initializeHowler() {
                const {Howl: e} = await s.e(472).then(s.t.bind(s, 7472, 23));
                this.howl = new e({
                    src: [this.streamUrl],
                    format: ["mp3"],
                    html5: !0,
                    autoplay: !1,
                    loop: !1,
                    volume: 1,
                    preload: !0,
                    onload: () => {
                        this.isReady = !0,
                        this.fire({
                            name: "ready"
                        })
                    }
                    ,
                    onplay: () => {
                        this.tween(),
                        this.state = "playing",
                        this.fire({
                            name: "play"
                        })
                    }
                    ,
                    onpause: () => {
                        this.stopTween(),
                        this.state = "paused",
                        this.fire({
                            name: "pause"
                        })
                    }
                    ,
                    onend: () => {
                        this.handlePlaybackEnd()
                    }
                    ,
                    onstop: () => {
                        this.stopTween(),
                        this.state = "paused",
                        this.fire({
                            name: "pause"
                        })
                    }
                    ,
                    onloaderror: (e, t) => {
                        const r = new Error("Loading stream failed",{
                            cause: t
                        });
                        this.state = "stopped",
                        this.fire({
                            name: "error",
                            reason: r
                        })
                    }
                    ,
                    onplayerror: (e, t) => {
                        const r = new Error("Playing stream errored",{
                            cause: t
                        });
                        this.state = "stopped",
                        this.fire({
                            name: "error",
                            reason: r
                        })
                    }
                })
            }
            handlePlaybackEnd = () => {
                this.state = "stopped",
                this.stopTween(),
                this.fire({
                    name: "stop"
                })
            }
            ;
            stopTween = () => {
                this.isTweening = !1,
                clearInterval(this.timer)
            }
            ;
            tween = () => {
                !0 !== this.isTweening && (this.isTweening = !0,
                this.timer = setInterval(( () => {
                    this.currentTime = this.howl?.seek() ?? 0,
                    this.fire({
                        name: "pulse",
                        currentTime: this.currentTime + this.offset
                    })
                }
                ), 50))
            }
            ;
            action = e => {
                switch ((0,
                o.eU)(this.howl, "Howl not initialized"),
                e.name) {
                case "mute":
                    this.howl.mute();
                    break;
                case "pause":
                case "play":
                    void 0 !== e.seekTo && this.seek(e.seekTo),
                    "play" === e.name && "playing" !== this.state && this.howl.play(),
                    "pause" === e.name && this.howl.pause();
                    break;
                case "playHead":
                    this.seek(e.seekTo);
                    break;
                case "stop":
                    this.howl.stop();
                    break;
                case "volume":
                    this.howl.volume(e.volume);
                    break;
                default:
                    (0,
                    o.xb)(e)
                }
            }
            ;
            seek = e => {
                this.currentTime = Math.max(0, e - this.offset),
                this.howl?.seek(this.currentTime)
            }
            ;
            setSpeedInternal = e => {
                const t = this.speeds[e.toString()];
                return void 0 !== t && (this.howl?.rate(t),
                !0)
            }
        }
        const a = (e, t) => {
            switch (e) {
            case "deezer":
                return `//${globalThis.location.host}/stream/deezer/${t.externalid}`;
            case "file":
            case "soundcloud":
                return `//${globalThis.location.host}https://chordify.net/api/v2/songs/${t.pseudoid}/stream`;
            case "rocketsongs":
            case "url":
                return t.stream
            }
        }
        ;
        class d extends n {
            isPreview = !1;
            constructor(e) {
                super("deezer", e)
            }
            initialize() {
                getDeezerAccessToken((e => {
                    this.streamUrl = this.streamUrl + (e ? `/${e}` : ""),
                    super.initialize(),
                    e || (this.isPreview = !0,
                    this.offset = 30.8,
                    this.fire({
                        name: "preview"
                    }))
                }
                ))
            }
            handlePlaybackEnd = () => {
                if (this.state = "stopped",
                this.stopTween(),
                "deezer" === this.type && this.isPreview)
                    return this.fire({
                        name: "pulse",
                        currentTime: this.offset
                    }),
                    void this.fire({
                        name: "pause"
                    });
                this.fire({
                    name: "stop"
                })
            }
        }
        var h = s(5830);
        class c extends n {
            constructor(e) {
                super("soundcloud", e);
                let t = !1;
                this.on("error", ( () => {
                    if (!t) {
                        t = !0;
                        const {pseudoid: r} = e;
                        fetch(`/song/checkDeleted/${r}`).catch(h.C)
                    }
                }
                ))
            }
        }
        class l extends i {
            currentSpeed = 1;
            constructor() {
                super("virtual"),
                this.speeds = {
                    "-5": .5,
                    "-4": .6,
                    "-3": .7,
                    "-2": .8,
                    "-1": .9,
                    0: 1,
                    1: 1.1,
                    2: 1.2,
                    3: 1.3,
                    4: 1.4,
                    5: 1.5
                },
                this.isReady = !0
            }
            initialize = () => {
                this.fire({
                    name: "ready"
                })
            }
            ;
            action = e => {
                switch (e.name) {
                case "play":
                    void 0 !== e.seekTo && (this.currentTime = e.seekTo),
                    this.startTween(),
                    this.state = "playing",
                    this.fire({
                        name: "play"
                    });
                    break;
                case "pause":
                    this.stopTween(),
                    this.state = "paused",
                    this.fire({
                        name: "pause"
                    });
                    break;
                case "stop":
                    this.stopTween(),
                    this.currentTime = 0,
                    this.state = "stopped",
                    this.fire({
                        name: "stop"
                    });
                    break;
                case "playHead":
                    this.currentTime = e.seekTo,
                    "playing" === this.state && this.startTween()
                }
            }
            ;
            setSpeedInternal = e => {
                const t = this.speeds[e];
                return void 0 !== t && (this.currentSpeed = t,
                "playing" === this.state && this.startTween(),
                !0)
            }
            ;
            startTween = () => {
                this.stopTween(),
                this.timer = setInterval(( () => {
                    this.currentTime += .05 * this.currentSpeed,
                    this.fire({
                        name: "pulse",
                        currentTime: this.currentTime
                    })
                }
                ), 50)
            }
            ;
            stopTween = () => {
                this.timer && (clearInterval(this.timer),
                this.timer = void 0)
            }
        }
        window.YT = window.YT ?? {
            PlayerState: {
                UNSTARTED: -1,
                ENDED: 0,
                PLAYING: 1,
                PAUSED: 2,
                BUFFERING: 3,
                CUED: 5
            }
        };
        class u extends Error {
            name = "YoutubePlayerError"
        }
        class p extends i {
            errorHandled = !1;
            isUserInited = !1;
            realSpeed = 1;
            constructor(e) {
                super("youtube"),
                this.config = {
                    controls: e.ytCtrl
                },
                this.videoId = e.externalid,
                this.lastSeek = (new Date).getTime(),
                this.speeds = {
                    "-2": .5,
                    "-1": .75,
                    0: 1,
                    1: 1.25,
                    2: 1.5,
                    3: 1.75,
                    4: 2
                },
                this.on("speed", ( () => this.getPlaybackRate()))
            }
            initialize = () => {
                window.addEventListener("message", (e => {
    if (!("string" == typeof e.data.source && e.data.source.indexOf("react-") > -1) && true) {
        const {cmd: t, parms: r} = e.data;
        switch (t) {
            case "onReady": this.onReady(); break;
            case "onError": this.onError(r[0]); break;
            case "onStateChange": this.onStateChange(r[0]); break;
            case "onYouTubeIframeAPIReady": this.onYouTubeIframeAPIReady(); break;
            case "setCurrentTime": this.setCurrentTime(r[0]); break;
            case "setCurrentSpeed": this.setCurrentSpeed(r[0]); break;
        }
    }
}));
                const e = this.getEmbedUrl();
                (0,
                h.I)("youtube-player", {
                    embedUrl: e
                }),
                this.loadWrappedPlayer(e)
            }
            ;
            getPlaybackRate = () => {
                this.sendMessage({
                    cmd: "getPlaybackRate"
                })
            }
            ;
            setPlaybackRate = e => {
                this.sendMessage({
                    cmd: "setPlaybackRate",
                    parms: [e]
                })
            }
            ;
            playVideo = () => {
                this.sendMessage({
                    cmd: "playVideo"
                })
            }
            ;
            pauseVideo = () => {
                this.sendMessage({
                    cmd: "pauseVideo"
                })
            }
            ;
            stopVideo = () => {
                this.sendMessage({
                    cmd: "stopVideo"
                })
            }
            ;
            mute = () => {
                this.sendMessage({
                    cmd: "mute"
                })
            }
            ;
            unMute = () => {
                this.sendMessage({
                    cmd: "unMute"
                })
            }
            ;
            setVolume = e => {
                document.body.className.indexOf("ios") > -1 || this.sendMessage({
                    cmd: "setVolume",
                    parms: [e]
                })
            }
            ;
            loadWrappedPlayer = e => {
                const t = document.createElement("iframe");
                t.id = "embedWrapper",
                t.src = e,
                t.style.border = "none",
                t.style.height = "100%",
                t.style.width = "100%",
                t.scrolling = "no",
                t.allow = "autoplay",
                t.referrerPolicy = "no-referrer";
                const r = document.getElementById("youtube");
                (0,
                o.eU)(r),
                r.innerHTML = "",
                r.append(t),
                this.iframeEl = t
            }
            ;
            getEmbedUrl = () => {
                let e = `${window.embedHost}/chordify_files/youtube_embed.html`;
                return window.needsConsent && (e += "&nocookie=1"),
                e
            }
            ;
            sendMessage = e => {
                (0,
                o.eU)(this.iframeEl),
                document.contains(this.iframeEl) ? this.iframeEl.contentWindow ? this.iframeEl.contentWindow.postMessage(e, "*") : this.logMsgSendingError(e, "Youtube embed iframe element has no contentWindow") : this.logMsgSendingError(e, "Youtube embed iframe element is not in the DOM")
            }
            ;
            logMsgSendingError = (e, t) => (0,
            h.C)(new u(`Failed to send cmd '${e.cmd}' to youtube embed with error: ${t}`), {
                extra: {
                    hasContentWindow: !!this.iframeEl?.contentWindow,
                    isReady: this.isReady,
                    playerTime: Date.now() - this.lastSeek,
                    iframeMessage: e
                },
                fingerprint: ["youtube iframe comms error"]
            });
            onReady = () => {
                this.isReady = !0,
                this.unMute(),
                this.setVolume(100),
                this.fire({
                    name: "ready"
                })
            }
            ;
            onError = e => {
                const t = new u(`Youtube iframe API error code: ${e}`);
                this.fire({
                    name: "error",
                    reason: t
                }),
                (0,
                h.C)(t, {
                    tags: {
                        youtubeErrorCode: e
                    }
                }),
                this.errorHandled || (fetch(`/api/internal/analytics/youtubeError/youtube:${this.videoId}/${e}`, {
                    method: "POST"
                }),
                this.errorHandled = !0)
            }
            ;
            setCurrentTime = e => {
                this.currentTime = e
            }
            ;
            onYouTubeIframeAPIReady = () => {
                this.sendMessage({
                    cmd: "initPlayer",
                    parms: [{
                        videoId: this.videoId,
                        config: this.config
                    }]
                })
            }
            ;
            setCurrentSpeed = e => {
                this.realSpeed = e
            }
            ;
            onStateChange = e => {
                e === YT.PlayerState.UNSTARTED || (e === YT.PlayerState.BUFFERING ? this.state = "buffering" : e === YT.PlayerState.PLAYING ? ("playing" !== this.state && (this.state = "playing",
                this.fire({
                    name: "play"
                })),
                this.tween()) : e === YT.PlayerState.PAUSED ? (this.state = "paused",
                this.fire({
                    name: "pause"
                }),
                clearInterval(this.timer)) : e === YT.PlayerState.ENDED && (this.state = "stopped",
                this.fire({
                    name: "stop"
                }),
                clearInterval(this.timer)))
            }
            ;
            tween = () => {
                "playing" === this.state && (clearInterval(this.timer),
                this.timer = window.setInterval(( () => {
                    const e = (new Date).getTime();
                    if (void 0 !== this.lastSeekDestination && e - this.lastSeek > 500)
                        return this.seekTo(this.lastSeekDestination),
                        void (this.lastSeekDestination = void 0);
                    e - this.lastSeek < 500 || (this.currentTime += .02,
                    this.currentTime > 0 && this.fire({
                        name: "pulse",
                        currentTime: this.currentTime
                    }))
                }
                ), 20))
            }
            ;
            seekTo = e => {
                const t = (new Date).getTime();
                return t - this.lastSeek < 500 ? (this.lastSeek = t,
                this.lastSeekDestination = e,
                !1) : (0 === e && (e = 1e-4),
                this.isReady ? (this.lastSeek = t,
                this.sendMessage({
                    cmd: "seekTo",
                    parms: [e]
                }),
                this.tween(),
                void (this.currentTime = e)) : (window.setTimeout(( () => {
                    this.seekTo(e)
                }
                ), 500),
                void (this.currentTime = e)))
            }
            ;
            action = e => {
                if (this.isReady)
                    switch (e.name) {
                    case "play":
                        return "playing" !== this.state && this.playVideo(),
                        void 0 !== e.seekTo && this.seekTo(e.seekTo),
                        void (window.isTouch && !this.isUserInited && window.setTimeout(( () => {
                            "buffering" !== this.state || this.isUserInited || this.pauseVideo()
                        }
                        ), 2e3));
                    case "playHead":
                        return void this.seekTo(e.seekTo);
                    case "pause":
                        this.pauseVideo();
                        break;
                    case "stop":
                        this.stopVideo();
                        break;
                    case "mute":
                        e.mute ? this.mute() : this.unMute();
                        break;
                    case "volume":
                        {
                            const t = 100 * e.volume;
                            this.setVolume(t);
                            break
                        }
                    }
                else
                    window.setTimeout(( () => {
                        this.action(e)
                    }
                    ), 500)
            }
            ;
            setSpeedInternal = e => {
                if (!Chordify.isPremium || !this.isReady)
                    return !1;
                const t = this.speeds[e.toString()];
                return void 0 !== t && (this.setPlaybackRate(t),
                this.speedCheckTimer && clearTimeout(this.speedCheckTimer),
                this.speedCheckTimer = window.setTimeout(( () => {
                    if (this.realSpeed === t || !Chordify.isPremium)
                        return;
                    const e = Object.keys(this.speeds).find((e => this.speeds[e] === this.realSpeed));
                    Chordify.premium.tempo = void 0 !== e ? parseInt(e, 10) : Chordify.premium.tempo
                }
                ), 1e3),
                !0)
            }
        }
        var f = s(5814)
          , m = s(8649);
        function y(e, t, r) {
            const {innerHeight: o, innerWidth: i} = e
              , s = i > o;
            return 3 === t ? s && i <= 630 || i <= 498 ? 2 : 4 : i <= 720 || s && o <= 590 && i <= 850 || r && i >= 990 && i <= 1200 ? 2 : 4
        }
        const g = "countoff-counter"
          , v = /^((?!chrome|android).)*safari/i.test(navigator.userAgent) && parseInt(/Version\/(\d+)/.exec(navigator.userAgent)?.[1] ?? "", 10) >= 16;
        class C {
            boundary = null;
            currentChordEl = null;
            currentChordIndex = 0;
            dragStartEl = null;
            hasMoved = !1;
            hasTouchMoved = !1;
            isDragging = !1;
            loopEndEl = null;
            loopStartEl = null;
            playTime = 0;
            isReady = !1;
            chordHeight = 50;
            isCountingOff = !1;
            play30Dispatched = !1;
            playTS = null;
            scrollAreaHeight = 0;
            constructor(e, t) {
                this.isEmbed = self.location.pathname.indexOf("/embed/") >= 0,
                this.type = e.type,
                window.addEventListener("resize", this.updateSizes),
                this.updateSizes(),
                this.mediaInteractor = t,
                "virtual" === e.type && (this.chordPlayback = ( () => {
                    let e;
                    return {
                        initialize: async () => {
                            e = await (0,
                            f.o)("Legacy"),
                            (0,
                            m.Y)(e),
                            e.setVolume(.8)
                        }
                        ,
                        playChord: async t => {
                            e && t?.handleParts && (e.ready || await e.init(),
                            e.play(t.handleParts))
                        }
                        ,
                        stop: () => {
                            e?.stop()
                        }
                    }
                }
                )(),
                this.chordPlayback.initialize()),
                t.on("pause", this.handlePlayerPause),
                t.on("play", this.handlePlayerPlay),
                t.on("preview", this.handlePlayerPreviewDeezer),
                t.on("pulse", this.handlePlayerPulse),
                t.on("ready", this.handlePlayerReady),
                t.on("stop", this.handlePlayerStop),
                t.on("error", this.handlePlayerError);
                const r = document.querySelector("#chords");
                if (null === r)
                    throw new Error("chords div missing!");
                r.addEventListener("click", this.handleChordClick),
                r.addEventListener("touchend", this.handleChordClick),
                r.addEventListener("mousedown", this.handleChordDragStart),
                r.addEventListener("touchstart", this.handleChordDragStart),
                r.addEventListener("mouseover", this.handleChordDragMove),
                r.addEventListener("touchmove", this.handleChordDragMove),
                window.addEventListener("scroll", this.updateScrollTimeout, {
                    passive: !0
                }),
                document.body.addEventListener("mouseup", this.handleDragRelease),
                document.body.addEventListener("touchend", this.handleDragRelease),
                document.addEventListener("keyup", this.handleKeyUp),
                document.addEventListener("keypress", this.handleKeyUp),
                document.addEventListener("keydown", this.handleKeyDown),
                this.action = e => t.action(e),
                this.currentTime = t.currentTime || 0,
                this.isReady = t.isReady,
                this.on = (e, r) => t.on(e, r),
                this.speeds = t.speeds
            }
            get state() {
                return this.mediaInteractor.state
            }
            initialize = e => {
                "rocketsongs" === e.type && this.handlePlayerPreviewRocketSongs(e),
                (this.isEmbed || "youtube" !== e.type) && this.initMediaPlayer()
            }
            ;
            createLoopOptions = t => {
                if (!Chordify.chordsLoaded)
                    return console.error("Chords not loaded");
                const r = document.createElement("div");
                r.classList.add("loop-options"),
                r.innerHTML = `<a href="#" class="icon-delete edit-only"><a href="#copy" class="loop-copy edit-only">${Lang.copy}</a><a href="#remove" class="icon-close"></a>`,
                t.append(r);
                const o = parseInt(t.dataset.i ?? "0") - 1
                  , i = (0,
                e.vS)(Chordify.song.chords)(o)
                  , s = void 0 === i || i.isLastOnRow();
                "edit" === Chordify.songView && s && (r.style.right = "auto",
                r.style.left = "0")
            }
            ;
            findNearestChord(e) {
                if (!Chordify.chordsLoaded)
                    return console.error(new Error("Chordify.song missing")),
                    {
                        _type: "NoChords"
                    };
                const t = Chordify.song.chords;
                let r = this.currentChordIndex
                  , o = t[r + 1];
                if (void 0 === o)
                    return {
                        _type: "NotFound"
                    };
                const i = r > 1 && e + .5 < t[r].from;
                if (!i && e + .1 < o.from)
                    return {
                        _type: "NoJump"
                    };
                if (i) {
                    for (; e + .1 < t[r].from; )
                        if (void 0 === t[--r]) {
                            r++;
                            break
                        }
                    return o = t[r],
                    void 0 === o ? {
                        _type: "NotFound"
                    } : {
                        _type: "Ahead",
                        chord: o,
                        index: r
                    }
                }
                for (r++; void 0 !== t[r] && void 0 !== o && e + .1 >= o.to; )
                    o = t[++r];
                return void 0 === o ? {
                    _type: "NotFound"
                } : {
                    _type: "Behind",
                    chord: o,
                    index: r
                }
            }
            dispatchEvent = e => {
                Chordify.dispatchEvent({
                    player: e
                })
            }
            ;
            getPlayDuration = () => null === this.playTS ? null : Date.now() - this.playTS;
            handleArrowKeys = t => {
                if (!Chordify.chordsLoaded)
                    return console.error("Chords not loaded");
                if ("playing" === this.mediaInteractor.state || Chordify.noPlayerSync || this.isCountingOff || null === this.currentChordEl)
                    return;
                if (("ArrowDown" === t.key || "ArrowUp" === t.key) && "diagrams" === Chordify.songView)
                    return;
                if (("ArrowLeft" === t.key || "ArrowRight" === t.key) && (t.metaKey || t.ctrlKey || t.altKey))
                    return;
                t.preventDefault();
                const r = document.querySelector(".chord-edit")
                  , o = parseInt(r?.dataset.i ?? this.currentChordEl.dataset.i ?? "0", 10)
                  , i = ( () => {
                    if ("ArrowRight" === t.key)
                        return o + 1;
                    if ("ArrowLeft" === t.key)
                        return o - 1;
                    const e = y(window, Chordify.song.barLength, Chordify.hasWideChords)
                      , r = Chordify.song.barLength * e;
                    return "ArrowDown" === t.key ? o + r : o - r
                }
                )()
                  , s = Object.keys(Chordify.song.chords).length - 1
                  , n = Math.max(i, 0)
                  , a = Math.min(n, s)
                  , d = (0,
                e.vS)(Chordify.song.chords)(a)?.el;
                d && ("edit" === Chordify.songView && Chordify.editJSLoaded ? Chordify.edit.openEditTooltip(d) : this.setCurrentChord(d),
                this.scrollToChord(d))
            }
            ;
            handleChordClick = e => {
                if ("touchend" === e.type)
                    return this.hasTouchMoved ? void (this.hasTouchMoved = !1) : e.stopPropagation();
                if (null === e.target)
                    return;
                (0,
                t.Gn)(e.target);
                const r = e.target.closest(".chord");
                if (null === r || null !== e.target.closest(".loop-options"))
                    return void e.preventDefault();
                if ("edit" === Chordify.songView && Chordify.editJSLoaded) {
                    if (null !== e.target.closest(".chord-edit-tooltip"))
                        return;
                    return Chordify.edit.openEditTooltip(r),
                    void ("playing" !== this.mediaInteractor.state && this.currentChordEl?.classList.remove("currentChord"))
                }
                if (Chordify.noPlayerSync)
                    return;
                const o = Chordify.countOffEnabled;
                if (this.isCountingOff && this.cancelCountOff(),
                o)
                    return this.setCurrentChord(r),
                    this.scrollToChord(r),
                    void this.startCountOff();
                this.play(r),
                Chordify.dispatchEvent({
                    chordChange: {
                        chordEl: r,
                        source: "click"
                    }
                })
            }
            ;
            handleChordDragStart = e => {
                if ("mousedown" === e.type && 0 !== e.button)
                    return;
                if ("touchstart" === e.type && !Chordify.canCreateLoop)
                    return;
                if (null === e.target)
                    return;
                (0,
                t.Gn)(e.target);
                const r = e.target.closest(".chord");
                if (null === r)
                    return;
                const o = e.target.getAttribute("href");
                if ("#remove" === o)
                    return Chordify.removeLoop(e),
                    e.stopPropagation();
                if ("#copy" === o) {
                    const e = document.querySelectorAll(".loop");
                    return (0,
                    t.on)(e, "loop-fade-in"),
                    setTimeout(( () => (0,
                    t.Aq)(e, "loop-fade-in")), 200),
                    void (this.isDragging = !1)
                }
                const i = r.classList.contains("loop-first") || r.classList.contains("loop-last");
                ("touchstart" !== e.type || i) && (!i && r.classList.contains("loop") || ("touchstart" === e.type && e.stopPropagation(),
                this.isDragging = !0,
                this.hasMoved = !1,
                this.dragStartEl = r,
                this.boundary = null,
                r.classList.contains("loop-first") ? this.boundary = "first" : r.classList.contains("loop-last") && (this.boundary = "last"),
                document.onselectstart = function() {
                    return !1
                }
                ))
            }
            ;
            handleChordDragMove = e => {
                if ("touchmove" === e.type && (this.hasTouchMoved = !0),
                !Chordify.canCreateLoop || this.hasTouchMoved && !this.isDragging)
                    return;
                if (null === e.target)
                    return;
                let r;
                if (r = "touchmove" === e.type ? (e => {
                    if (void 0 === e.touches || void 0 === e.changedTouches || !this.isDragging)
                        return null;
                    e.preventDefault();
                    const t = e.touches[0] || e.changedTouches[0]
                      , r = t.pageX
                      , o = t.pageY - document.body.scrollTop;
                    return document.elementFromPoint(r, o)
                }
                )(e) : e.target.closest(".chord"),
                !r)
                    return;
                if (e.stopPropagation(),
                !this.isDragging || !r.classList.contains("chord"))
                    return;
                e.preventDefault(),
                this.hasMoved = !0;
                const o = document.getElementById("chords")?.children;
                if (document.querySelector(".loop-options")?.remove(),
                this.boundary && this.loopEndEl && this.loopStartEl) {
                    "first" === this.boundary && (0,
                    t.cL)(r) > (0,
                    t.cL)(this.loopEndEl) ? (this.dragStartEl = this.loopEndEl,
                    this.loopStartEl.classList.remove("loop-first"),
                    this.loopStartEl = this.loopEndEl,
                    this.loopStartEl.classList.add("loop-first"),
                    this.boundary = "last") : "last" === this.boundary && (0,
                    t.cL)(r) < (0,
                    t.cL)(this.loopStartEl) && (this.dragStartEl = this.loopStartEl,
                    this.loopEndEl.classList.remove("loop-last"),
                    this.loopEndEl = this.loopStartEl,
                    this.loopStartEl.classList.add("loop-last"),
                    this.boundary = "first"),
                    "first" === this.boundary ? this.loopStartEl = r : this.loopEndEl = r,
                    (0,
                    t.Aq)(o, "loop", `loop-${this.boundary}`);
                    const e = [...o ?? []].slice((0,
                    t.cL)(this.loopStartEl), (0,
                    t.cL)(this.loopEndEl) + 1);
                    return (0,
                    t.on)(e, "loop"),
                    void r.classList.add(`loop-${this.boundary}`)
                }
                if (!this.dragStartEl)
                    return;
                (0,
                t.Aq)(o, "loop", "loop-last", "loop-first");
                const i = (0,
                t.cL)(r)
                  , s = (0,
                t.cL)(this.dragStartEl)
                  , n = [...document.getElementById("chords")?.children ?? []].slice(Math.min(s, i), Math.max(s, i));
                (0,
                t.on)(n, "loop"),
                r.classList.add("loop"),
                this.dragStartEl.classList.add("loop")
            }
            ;
            handleChordsRendered = e => {
                const t = () => {
                    const e = document.getElementById("chords");
                    if (!e)
                        return 0;
                    const t = e.getBoundingClientRect()
                      , r = document.documentElement
                      , o = t.top + window.scrollY - r.clientTop;
                    return Math.round(o)
                }
                ;
                let r = t();
                window.document.addEventListener("ChordifyLibrary", (function(e) {
                    if (void 0 === e.detail.chordChange)
                        return;
                    if ("diagrams" === Chordify.songView)
                        return;
                    const o = t()
                      , i = o - r;
                    0 !== i && (r = o,
                    Chordify.offsetPositions(0, i))
                }
                )),
                this.setCurrentChord(e),
                this.updateSizes()
            }
            ;
            handleControlClick = e => {
                "play" === e ? this.togglePlay() : "rewind" === e && this.doRewind()
            }
            ;
            handleDragRelease = e => {
                document.onselectstart = null;
                const t = document.getElementById("chords")
                  , r = t?.querySelectorAll(".loop");
                return this.isDragging && this.hasMoved ? (this.isDragging = !1,
                this.hasMoved = !1,
                void 0 === r || r.length < 2 ? (Chordify.removeLoop(e),
                e.stopPropagation()) : (document.querySelector(".loop-options")?.remove(),
                this.loopStartEl = r[0],
                this.loopStartEl.classList.add("loop-first"),
                this.loopEndEl = r[r.length - 1],
                this.loopEndEl.classList.add("loop-last"),
                this.createLoopOptions(this.loopEndEl),
                t?.classList.add("chords-loop"),
                document.querySelector(".function-select button")?.classList.add("active"),
                Chordify.loop = {
                    hasLoop: !0,
                    loopChords: [...r]
                },
                "edit" !== Chordify.songView && this.play(this.loopStartEl),
                void Chordify.dispatchEvent({
                    loop: {
                        enabled: !0,
                        end: parseInt(this.loopEndEl.dataset.i ?? "0", 10),
                        start: parseInt(this.loopStartEl.dataset.i ?? "0", 10)
                    }
                }))) : (this.isDragging = !1,
                void (this.hasMoved = !1))
            }
            ;
            handleKeyDown = r => {
                if (r.target) {
                    if ((0,
                    t.Gn)(r.target),
                    "input" === r.target.tagName.toLowerCase() || "textarea" === r.target.tagName.toLowerCase() || "a" === r.target.tagName.toLowerCase()) {
                        const e = "edit" === Chordify.songView && (" " === r.key || "Spacebar" === r.key) && r.target.classList.contains("chord-edit-input")
                          , t = r.target.classList.contains("volume-slider") && " " === r.key;
                        if (!e && !t)
                            return
                    }
                    if ("Enter" === r.key && "edit" === Chordify.songView && Chordify.editJSLoaded) {
                        const t = document.querySelector(".chord-edit");
                        if (!t || !Chordify.chordsLoaded)
                            return;
                        const r = (0,
                        e.E4)(Chordify.song.chords)(t);
                        if (!r)
                            return;
                        return Chordify.edit.openEditTooltip(t),
                        void Chordify.edit.toggleTooltipInput(r)
                    }
                    if (" " === r.key || "Spacebar" === r.key)
                        return r.preventDefault(),
                        this.togglePlay(),
                        r.stopPropagation();
                    "ArrowDown" !== r.key && "ArrowLeft" !== r.key && "ArrowRight" !== r.key && "ArrowUp" !== r.key || this.handleArrowKeys(r)
                }
            }
            ;
            handleKeyUp = e => {
                if (null !== e.target && ((0,
                t.Gn)(e.target),
                "input" !== e.target.tagName.toLowerCase() && "textarea" !== e.target.tagName.toLowerCase() && "a" !== e.target.tagName.toLowerCase()))
                    return " " === e.key || "Spacebar" === e.key ? (e.preventDefault(),
                    e.stopPropagation(),
                    e.stopImmediatePropagation(),
                    e.stopPropagation()) : void 0
            }
            ;
            handlePlayerPreviewDeezer = () => Chordify.doWhenChordsLoaded((t => {
                const r = t.chords;
                let o = 0
                  , i = !1;
                Object.values(r).forEach((e => {
                    e.to <= 30 || e.from > 62 ? (e.el.style.backgroundColor = "#ddd",
                    e.el.style.color = "#aaa") : (i || (setTimeout(( () => {
                        this.setCurrentChord(e.el)
                    }
                    ), 10),
                    i = !0),
                    o = e.idx)
                }
                ));
                const s = document.createElement("div");
                s.id = "deezerNotification",
                s.classList.add("max-duration"),
                s.innerHTML = '<span class="icon-deezer" style="display:block;font-size:60pt;line-height:40px;color:#555;"></span><p>Full-length Deezer tracks are only available if you have a <a href="http://www.deezer.com?app_id=114161" target="_blank"> Deezer account</a>.<br/><a href="#" onclick="connectDeezer();return false;" style="font-weight:bold;color:#555;">Connect with Deezer</a></p>';
                const n = Object.values(r).find(( (i, s) => {
                    if (!(s > o))
                        return !1;
                    const n = (0,
                    e.vS)(r)(s - 1)
                      , a = n && n.getTop() < i.getTop()
                      , d = s - 1 + 4 * t.barLength < Object.keys(r).length;
                    return !(!a || !d)
                }
                ));
                if (!n)
                    return;
                const a = document.getElementById("chordsArea");
                a && (s.style.width = a.getBoundingClientRect().width - 50 + "px"),
                n.el.append(s)
            }
            ));
            handlePlayerPreviewRocketSongs = e => {
                const t = `//www.rocketsongs.com/TrackOwners/RS-artist/Songs/${e.externalid.replace(":c", "")}/RS-song?utm_source=Chordify&amp;utm_medium=Banner&amp;utm_content=Purchase+licensed+version&amp;utm_campaign=Chordify`
                  , r = document.createElement("div");
                r.setAttribute("style", "background:#ddd;padding: 50px 0;"),
                r.setAttribute("id", "rocketsongsNotification"),
                r.innerHTML = `<p style="margin: 0 auto;max-width:466px;">You just played along with a Rocket Songs preview clip. In order to play the whole song you need to <a href="${t}" target="_blank">purchase the licensed version at Rocket Songs</a></p>`;
                const o = document.getElementById("chordsArea");
                o?.append(r)
            }
            ;
            handlePlayerReady = () => {
                this.isReady = !0,
                "1" === (0,
                o.yN)("play") && this.mediaInteractor.action({
                    name: "play"
                }),
                this.dispatchEvent({
                    ready: !0
                })
            }
            ;
            handlePlayerPause = () => {
                document.getElementById("song")?.classList.remove("playing");
                const e = document.querySelector(".chord-edit");
                "edit" === Chordify.songView && e && this.setCurrentChord(e),
                this.playTime += this.getPlayDuration() ?? 0,
                this.playTS = null,
                this.dispatchEvent({
                    event: "pause"
                }),
                this.chordPlayback?.stop()
            }
            ;
            handlePlayerPlay = () => {
                document.getElementById("song")?.classList.add("playing"),
                window.innerWidth < 930 && window.innerHeight < 600 && document.body.classList.add("collapsed"),
                this.playTS = Date.now(),
                this.dispatchEvent({
                    event: "play"
                })
            }
            ;
            handlePlayerPulse = ({currentTime: t}) => {
                if (!Chordify.chordsLoaded || Chordify.noPlayerSync)
                    return;
                (this.getPlayDuration() ?? 0) / 1e3 >= 30 && !this.play30Dispatched && (this.play30Dispatched = !0,
                this.dispatchEvent({
                    event: "play30"
                }));
                const r = this.findNearestChord(t);
                if ("Behind" !== r._type && "Ahead" !== r._type)
                    return;
                if (this.currentTime = t,
                this.currentChordIndex = r.index,
                "Ahead" === r._type)
                    return void this.setCurrentChord(r.chord.el);
                const o = r.chord;
                if (Chordify.loop.hasLoop && this.currentChordEl && this.currentChordEl.classList.contains("loop-last") && document.body.classList.contains("user-premium")) {
                    const t = Chordify.loop.loopChords[0];
                    this.setCurrentChord(t),
                    Chordify.dispatchEvent({
                        chordChange: {
                            chordEl: t,
                            source: "loop"
                        }
                    });
                    const r = (0,
                    e.E4)(Chordify.song.chords)(t)?.from;
                    return this.mediaInteractor.action({
                        name: "play",
                        seekTo: r
                    }),
                    void this.scrollToChord(this.currentChordEl)
                }
                Chordify.dispatchEvent({
                    chordChange: {
                        chordEl: o.el,
                        source: "pulse"
                    }
                }),
                this.setCurrentChord(o.el),
                this.scrolledRecently || "diagrams" !== Chordify.songView && 1 !== o.beat || this.scrollToChord(o.el)
            }
            ;
            handlePlayerStop = () => {
                if (document.getElementById("song")?.classList.remove("playing"),
                !Chordify.chordsLoaded)
                    return;
                const e = Chordify.song.chords[0].el;
                this.setCurrentChord(e),
                this.scrollToChord(e),
                this.playTime += this.getPlayDuration() ?? 0,
                this.playTS = null,
                this.dispatchEvent({
                    event: "stop"
                })
            }
            ;
            handlePlayerError = e => {
                document.dispatchEvent(new CustomEvent("mediaPlayerError",{
                    detail: e.reason
                }))
            }
            ;
            pause = () => {
                this.mediaInteractor.action({
                    name: "pause"
                }),
                this.chordPlayback?.stop()
            }
            ;
            play = t => {
                if (this.initMediaPlayer(),
                !Chordify.chordsLoaded || !t)
                    return this.mediaInteractor.action({
                        name: "play"
                    });
                this.setCurrentChord(t),
                this.scrollToChord(t);
                const r = (0,
                e.E4)(Chordify.song.chords)(t);
                this.mediaInteractor.action({
                    name: "play",
                    seekTo: r?.from ?? 0
                }),
                Chordify.dispatchEvent({
                    chordChange: {
                        chordEl: t,
                        source: "play"
                    }
                })
            }
            ;
            startCountOff = () => {
                if (!Chordify.chordsLoaded)
                    return void console.error(new Error("Chordify.song missing"));
                this.dispatchEvent({
                    event: "play"
                });
                const t = (0,
                e.E4)(Chordify.song.chords)(this.currentChordEl);
                t && "youtube" === this.type ? (this.mediaInteractor.action({
                    name: "playHead",
                    seekTo: t.from
                }),
                this.mediaInteractor.action({
                    name: "pause"
                })) : t && this.mediaInteractor.action({
                    name: "pause",
                    seekTo: t.from
                });
                let r = Chordify.song.barLength;
                const o = 1e3 / (Chordify.song.getSongBPM() / 60);
                this.isCountingOff = !0;
                const i = document.createElement("div");
                i.id = g;
                const s = document.createElement("div");
                s.className = "coc-number",
                s.innerHTML = r.toString(),
                i.appendChild(s),
                document.body.appendChild(i);
                const n = window.setInterval(( () => {
                    if (r -= 1,
                    0 === r)
                        return this.stopCountOff(),
                        void this.play();
                    s && Chordify.song && (s.innerHTML = r.toString()),
                    this.playMetronome(!1)
                }
                ), o);
                this.playMetronome(!0),
                this.countOffInterval = n
            }
            ;
            stopCountOff = () => {
                this.isCountingOff = !1,
                window.clearInterval(this.countOffInterval),
                document.getElementById(g)?.remove()
            }
            ;
            cancelCountOff = () => {
                this.dispatchEvent({
                    event: "pause"
                }),
                this.stopCountOff()
            }
            ;
            loadMetronome = () => {
                delete this.metronomeAccent,
                delete this.metronome,
                this.metronomeAccent = new Audio("./chordify_files/audio/metronome/click_c5.mp3"),
                this.metronome = new Audio("./chordify_files/audio/metronome/click_c4.mp3"),
                this.metronomeAccent.volume = .5,
                this.metronome.volume = .5
            }
            ;
            playMetronome = e => {
                this.loadMetronome();
                const t = e ? this.metronomeAccent : this.metronome;
                void 0 !== t ? t.play() : console.error("Missing metronome sound")
            }
            ;
            scrolledRecently = !1;
            updateScrollTimeout = () => {
                this.scrolledRecently = !0,
                clearTimeout(this.scrollTimeout),
                setTimeout(( () => {
                    this.scrolledRecently = !1
                }
                ), 1e3)
            }
            ;
            scrollToChord = r => {
                if (!Chordify.chordsLoaded)
                    return console.error("Chords not loaded");
                if (Chordify.diagramsVisible) {
                    const e = (0,
                    t.cY)(r).left
                      , o = document.getElementById("chordsScrollbox");
                    if (!o)
                        return;
                    const i = e - (0,
                    t.cY)(o).left
                      , s = 9
                      , n = 4 === y(window, Chordify.song.barLength, Chordify.hasWideChords) ? r.offsetWidth * Chordify.song.barLength + 2 * s : s
                      , a = o.scrollLeft + i - n;
                    return void (o.scrollLeft = a)
                }
                const o = (0,
                e.E4)(Chordify.song.chords)(r);
                if (!o)
                    return;
                const i = (0,
                t.cY)(o.el).top
                  , s = i
                  , n = document.getElementById("song-page-sticky-header")
                  , a = n?.getBoundingClientRect().bottom ?? 0
                  , d = window.scrollY + a
                  , h = window.scrollY + this.scrollAreaHeight
                  , c = () => {
                    const e = i - this.chordHeight - 20
                      , t = this.scrollAreaHeight >= 4 * this.chordHeight ? e : i - 20;
                    window.scrollBy({
                        top: t - d,
                        behavior: "smooth"
                    })
                }
                ;
                if (s < d)
                    return c();
                const l = Chordify.song.chords[Object.keys(Chordify.song.chords).length - 1];
                (0,
                t.cY)(l.el).top + this.chordHeight < h || c()
            }
            ;
            seek = e => {
                let t;
                if (this.initMediaPlayer(),
                "number" == typeof e) {
                    const r = this.findNearestChord(e);
                    if ("Behind" !== r._type && "Ahead" !== r._type)
                        return;
                    t = r.chord
                } else
                    t = e;
                this.setCurrentChord(t.el),
                this.scrollToChord(t.el),
                this.mediaInteractor.action({
                    name: "playHead",
                    seekTo: t.from
                }),
                this.currentTime = t.from,
                Chordify.dispatchEvent({
                    chordChange: {
                        chordEl: t.el,
                        source: "seek"
                    }
                })
            }
            ;
            setCurrentChord = e => {
                Chordify.chordsLoaded && e.classList.contains("chord") && (null !== this.currentChordEl && (this.currentChordEl.classList.remove("currentChord"),
                this.rerenderElementSafari(this.currentChordEl)),
                Chordify.noPlayerSync || (this.currentChordIndex = parseInt(e.dataset.i ?? "0", 10),
                e.classList.add("currentChord"),
                this.rerenderElementSafari(e),
                this.currentChordEl = e))
            }
            ;
            rerenderElementSafari = e => {
                v && (e.style.opacity = "0.99",
                setTimeout((function() {
                    e.style.opacity = "1"
                }
                ), 20))
            }
            ;
            doRewind = () => {
                Chordify.chordsLoaded && this.setCurrentChord(Chordify.song.chords[0].el),
                this.currentTime = 0;
                const e = (this.isCountingOff || "playing" === this.mediaInteractor.state) && Chordify.countOffEnabled && "edit" !== Chordify.songView;
                this.isCountingOff && this.cancelCountOff(),
                e ? this.startCountOff() : this.mediaInteractor.action({
                    name: "playHead",
                    seekTo: 0
                }),
                Chordify.diagramsVisible ? document.getElementById("chordsScrollbox")?.scrollTo({
                    left: 0,
                    behavior: "smooth"
                }) : window.scrollTo({
                    top: 0,
                    behavior: "smooth"
                })
            }
            ;
            togglePlay = () => {
                const e = "playing" === this.mediaInteractor.state || this.isCountingOff ? "pause" : "play";
                if (Chordify.noPlayerSync)
                    return "play" === e ? this.play() : this.pause();
                if (!Chordify.chordsLoaded)
                    return console.warn("Chords not loaded");
                if (this.currentChordEl || (this.currentChordEl = Chordify.song.chords[0].el),
                "edit" !== Chordify.songView || "play" !== e)
                    return "play" === e && Chordify.countOffEnabled && !1 === this.isCountingOff ? (this.scrollToChord(this.currentChordEl),
                    void this.startCountOff()) : (this.isCountingOff && this.cancelCountOff(),
                    "play" === e ? this.play(this.currentChordEl) : this.pause());
                {
                    const e = document.querySelector(".chord-edit")
                      , t = null === e ? this.currentChordEl : e;
                    this.play(t)
                }
            }
            ;
            updateSizes = () => {
                if (Chordify.diagramsVisible || !Chordify.chordsLoaded)
                    return;
                if (this.scrollAreaHeight = window.innerHeight,
                Chordify.lyricsVisible && "chords" === Chordify.songView) {
                    const e = 230
                      , t = document.getElementById("lyrics-root");
                    this.scrollAreaHeight -= t?.offsetHeight ?? e
                } else
                    (window.innerWidth < 990 && window.innerHeight > 590 || this.isEmbed) && (this.scrollAreaHeight -= 200);
                const e = this.currentChordEl ?? Chordify.song.chords[0].el;
                this.chordHeight = e.offsetHeight
            }
            ;
            mediaInitialized = !1;
            initMediaPlayer = () => {
                this.mediaInitialized || (this.mediaInteractor.initialize(),
                this.mediaInitialized = !0)
            }
        }
        var b = s(1201);
        class w {
            chordsByChordLevel = {};
            get canSimplify() {
                return "simple" === this.chordLevel || this.hasComplexChords()
            }
            constructor(e, t, r) {
                this.barLength = e.chordInfo.barLength,
                this.derivedBpm = e.chordInfo.derivedBpm,
                this.derivedKey = e.chordInfo.derivedKey,
                this.editUserId = e.chordInfo.editUserId ?? void 0,
                this.versionId = e.versionId,
                this.id = e.pseudoId,
                this.chordLevel = t,
                this.edit = {
                    accidental: void 0,
                    offset: 0
                },
                this.anacrusisPadding = 0;
                const [i,s] = this.derivedKey.split(":")
                  , n = (0,
                o.LV)(b.eF[s][i] + r, 0, 11)
                  , [a,d] = b.HP[s][n];
                this.key = {
                    accidental: d,
                    interval: s,
                    root: a
                },
                this.setChordLevelChords(t, e.chords)
            }
            getChordAtTime = (e, t=0) => {
                const r = Object.values(this.chords ?? {});
                let o;
                if (o = e >= r[r.length - 1].to ? r[r.length - 1].idx : r.find((t => t.to > e))?.idx,
                void 0 !== o && o + t >= 0)
                    return r[o + t]
            }
            ;
            getElementIdx = e => {
                const t = document.getElementById("chords");
                return t ? [...t.children].findIndex((t => t === e.el)) : 0
            }
            ;
            getSongBPM = () => {
                const e = Chordify.isPremium ? Chordify.premium.getPlayerSpeed() : null;
                return null !== e ? Math.round(e * this.derivedBpm) : this.derivedBpm
            }
            ;
            hasChordsForLevel = e => e in this.chordsByChordLevel;
            getSongKeyHandle = () => (0,
            e.CB)({
                root: this.key.root,
                extension: this.key.interval
            });
            invalidateChordLevelChords = () => {
                this.chordsByChordLevel = {}
            }
            ;
            addLineBreak = e => {
                const t = this.getElementIdx(e)
                  , r = y(window, this.barLength, Chordify.hasWideChords)
                  , o = this.barLength * r
                  , i = o - 1 - (t - 1) % o + (e.beat - 1) + o;
                for (let t = 0; t < i; t++) {
                    const t = document.createElement("div");
                    t.className = "chord fake-chord section-padder",
                    e.el.insertAdjacentElement("beforebegin", t)
                }
            }
            ;
            removeSections = () => {
                const e = document.getElementsByClassName("section-padder");
                for (let t = e.length - 1; t >= 0; --t)
                    e[t].remove();
                Chordify.resetPositions(),
                Chordify.updateChordView(!1)
            }
            ;
            renderSection = t => {
                if (!Chordify.chordsLoaded)
                    return console.error(new Error("chords not loaded"));
                const r = this.getChordAtTime(t.begin)
                  , o = this.getChordAtTime(t.end);
                r && o && (r.setHidden(!1),
                void 0 === (0,
                e.vS)(Chordify.song.chords)(o.idx + 1) || (this.addLineBreak(o),
                Chordify.resetPositions()))
            }
            ;
            renderSections = e => {
                e.forEach(this.renderSection)
            }
            ;
            setBarLength = e => {
                if (this.barLength = e,
                this.anacrusisPadding > e - 1) {
                    const t = this.anacrusisPadding % (e - 1);
                    if (Chordify.editJSLoaded)
                        Chordify.edit.shiftChords(t);
                    else {
                        const e = t - (this.anacrusisPadding - this.edit.offset);
                        this.setOffset(e)
                    }
                }
            }
            ;
            setChordLevel = e => {
                this.chordLevel !== e && (this.chordLevel = e,
                this.updateChordsToChordLevel(e))
            }
            ;
            setChordLevelChords = (e, t) => {
                0 !== t.length && (this.chordsByChordLevel[e] = t.reduce(( (e, t, r) => (e[r] = t.handle,
                e)), {}))
            }
            ;
            setEditData = e => {
                e.offset && (this.edit.offset = e.offset),
                void 0 !== e.accidental && null !== e.accidental && Chordify.changeAccidental("flat" === e.accidental ? "b" : "#")
            }
            ;
            setOffset = e => {
                const t = e - this.edit.offset
                  , r = this.anacrusisPadding + t;
                this.anacrusisPadding = (0,
                o.LV)(r, 0, this.barLength - 1),
                this.edit.offset = e,
                Object.values(this.chords ?? []).forEach((e => {
                    e.beat = e.beat + t
                }
                ))
            }
            ;
            shiftRoot = (e, t) => {
                const r = (0,
                o.LV)(b.lC[e] + t, 0, 11)
                  , i = this.accidental ?? this.key.accidental;
                return b.C5[i][r]
            }
            ;
            updateChordsToChordLevel = t => {
                if (!Chordify.chordsLoaded)
                    return console.error(new Error("chords not loaded"));
                const r = this.chordsByChordLevel[t];
                if (void 0 === r)
                    return void console.error(new Error(`chords for level ${t} not found`));
                const o = Chordify.song.chords;
                for (const t in r) {
                    const i = r[t]
                      , s = (0,
                    e.vS)(o)(parseInt(t, 10));
                    s && s.setHandle(i)
                }
                Chordify.updateChordView(!1)
            }
            ;
            getCurrentEditUser() {
                if (Chordify.editJSLoaded && Chordify.edit.editChanged)
                    return Chordify.userId;
                const e = (0,
                o.yN)("edit");
                return !1 !== e && "original" !== e ? e : void 0
            }
            hasComplexChords() {
                return !!this.chords && Object.values(this.chords).some((e => !e.isSimple()))
            }
        }
        class E extends Error {
            constructor() {
                super("missing player")
            }
        }
        var L = s(8028);
        const S = window.Chordify = new class {
            constructor(e) {
                const {chordLang: t, userId: r, userPreferences: i} = e;
                this.canCreateLoop = !1,
                this.capoSetting = 0,
                this.chordLang = "english",
                this.chordsLoaded = !1,
                this.countOffEnabled = !1,
                this.diagramView = "animated",
                this.dzSupport = document.body.classList.contains("supports-deezer"),
                this.editJSLoaded = !1,
                this.hasWideChords = !1,
                this.isPremium = !1,
                this.loop = {
                    hasLoop: !1
                },
                this.lyricsVisible = !1,
                this.maxDuration = -1,
                this.maxDurationReached = !1,
                this.noPlayerSync = !1,
                this.playerInitialized = !1,
                this.reactHasRendered = !1,
                this.transposeSetting = 0,
                this.chordLang = t,
                this.userId = r,
                this.songView = i?.preferredSongView ?? void 0,
                this.diagramsVisible = "diagrams" === this.songView,
                this.instrument = i?.preferredInstrument ?? void 0,
                this.userSongSettings = {},
                i?.userSongSettings && void 0 !== i.preferredInstrument && this.setUserSongSettings(i.userSongSettings, i.preferredInstrument),
                this.updateChordView = (0,
                o.sg)(this.updateChordView, 300, !0)
            }
            changeAccidental = e => {
                if (void 0 === this.song)
                    return console.error(new Error("Chordify.song missing"));
                this.song.accidental !== e && (this.song.accidental = e,
                this.updateChordView(!0))
            }
            ;
            changeDiagramView = e => {
                this.noPlayerSync && "animated" === e || (this.diagramView = e,
                this.dispatchEvent({
                    diagramView: e
                }))
            }
            ;
            changeInstrument = t => {
                if (t !== this.instrument && (this.instrument = t,
                this.dispatchEvent({
                    instrument: t
                }),
                Chordify.isPremium)) {
                    const r = (0,
                    e.sG)(t);
                    if (void 0 === r)
                        return Chordify.premium.changeCapo(0);
                    const o = this.userSongSettings[r] ?? 0;
                    Chordify.premium.changeCapo(o)
                }
            }
            ;
            changeSections = e => {
                Chordify.dispatchEvent({
                    sections: e
                })
            }
            ;
            changeView = e => {
                if (this.songView === e)
                    return;
                const r = document.getElementById("song");
                r?.classList.remove("view-chords", "view-edit", "view-diagrams"),
                r?.classList.add(`view-${e}`);
                const o = this.diagramsVisible
                  , i = this.songView;
                this.diagramsVisible = "diagrams" === e,
                this.songView = e,
                this.dispatchEvent({
                    songView: e
                }),
                this.diagramsVisible && window.scrollY > 0 && window.scrollTo({
                    top: 0,
                    behavior: "smooth"
                }),
                "edit" !== i && "edit" !== this.songView || this.toggleEdit(),
                "edit" === i && this.updateChordView(!1),
                this.player && (this.player.updateSizes(),
                this.chordsLoaded && this.player.currentChordEl && (this.diagramsVisible || (0,
                t.cL)(this.player.currentChordEl) > 16) && this.player.scrollToChord(this.player.currentChordEl)),
                this.chordsLoaded && o !== this.diagramsVisible && this.updateOverflow(!1)
            }
            ;
            disablePlayerSync = () => {
                this.noPlayerSync = !0,
                this.changeDiagramView("summary");
                const e = this.player?.currentChordEl ?? document.querySelector("#chords .chord");
                e && this.player?.setCurrentChord(e)
            }
            ;
            dispatchEvent = e => {
                this.doWhenReactRendered(( () => document.dispatchEvent(new CustomEvent("ChordifyLibrary",{
                    detail: e
                }))))
            }
            ;
            dispatchReactRenderedEvent = () => {
                this.reactHasRendered = !0,
                document.dispatchEvent(new CustomEvent("ReactRendered"))
            }
            ;
            doWhenReactRendered = e => {
                if (this.reactHasRendered)
                    return e();
                document.addEventListener("ReactRendered", e)
            }
            ;
            chordsLoadedCallbacks = [];
            doWhenChordsLoaded = e => Chordify.chordsLoaded ? (e(Chordify.song),
            () => {}
            ) : (this.chordsLoadedCallbacks.push(e),
            () => {
                this.chordsLoadedCallbacks = this.chordsLoadedCallbacks.filter((t => t !== e))
            }
            );
            setChordsLoaded() {
                if (this.chordsLoaded = !0,
                !Chordify.chordsLoaded)
                    return;
                const e = Chordify.song;
                this.chordsLoadedCallbacks.forEach((t => {
                    t(e)
                }
                )),
                this.chordsLoadedCallbacks = []
            }
            initLoop = () => this.doWhenChordsLoaded((t => {
                if (void 0 === this.player)
                    return console.error(new E);
                const r = document.querySelector(".currentChord, .chord-edit")
                  , o = document.querySelector("#chords .chord")
                  , i = r ?? o;
                if (!i)
                    return;
                document.getElementById("chords")?.classList.add("chords-loop"),
                this.canCreateLoop = !0;
                const s = (0,
                e.E4)(t.chords)(i)?.idx ?? 0
                  , n = Math.min(s + 4 * t.barLength - 1, Object.keys(t.chords).length - 1)
                  , a = [];
                for (let r = s; r <= n; r++) {
                    const o = (0,
                    e.vS)(t.chords)(r);
                    if (!o)
                        break;
                    const i = o.el;
                    i.classList.add("loop"),
                    a.push(i)
                }
                this.player.loopStartEl = i,
                this.player.loopStartEl.classList.add("loop-first"),
                this.player.loopEndEl = a[a.length - 1],
                this.player.loopEndEl.classList.add("loop-last"),
                this.player.createLoopOptions(this.player.loopEndEl),
                this.loop = {
                    hasLoop: !0,
                    loopChords: a
                },
                this.dispatchEvent({
                    loop: {
                        enabled: !0,
                        end: n,
                        start: s
                    }
                })
            }
            ));
            removeLoop = e => {
                this.player ? ((0,
                t.Aq)(document.getElementsByClassName("loop"), "loop", "loop-first", "loop-last"),
                document.querySelector(".loop-options")?.remove(),
                document.getElementById("chords")?.classList.remove("chords-loop"),
                document.querySelector(".function-select button")?.classList.remove("active"),
                this.loop = {
                    hasLoop: !1
                },
                this.player.hasMoved = !1,
                this.player.isDragging = !1,
                this.player.boundary = null,
                "edit" !== this.songView && (this.canCreateLoop = !1),
                void 0 !== e && (e.stopImmediatePropagation(),
                e.preventDefault(),
                e.stopPropagation()),
                this.dispatchEvent({
                    loop: {
                        enabled: !1
                    }
                })) : console.error(new E)
            }
            ;
            initPlayer = e => {
                const t = (e => {
                    const {type: t} = e;
                    switch (t) {
                    case "virtual":
                        return new l;
                    case "youtube":
                        return new p(e);
                    case "soundcloud":
                        return new c(e);
                    case "deezer":
                        return new d(e);
                    default:
                        return new n(t,e)
                    }
                }
                )(e);
                this.player = new C(e,t),
                this.player.initialize(e),
                this.playerInitialized = !0
            }
            ;
            initSong = (e, t) => {
                this.song = new w(e,t,this.transposeSetting);
                const r = this.renderChords(e.chords);
                this.doWhenChordsLoaded((e => {
                    this.dispatchEvent({
                        chords: e.chords
                    })
                }
                )),
                this.doWhenReactRendered(( () => {
                    this.attachChordsToDOM(r)
                }
                ))
            }
            ;
            renderChords = t => {
                if (void 0 === this.song)
                    throw new Error("Chordify.song missing");
                const i = {};
                this.song.chords = i,
                this.maxDuration = document.body.classList.contains("user-premium") ? 1800 : 600,
                this.maxDurationReached = !1;
                let s = !0
                  , n = null;
                const a = []
                  , d = !1 !== (0,
                o.yN)("version_id")
                  , h = "simple" === this.song.chordLevel && !d;
                let c = !0;
                for (let o = 0; o < t.length; o++) {
                    const d = t[o]
                      , {beat: l, handle: u} = d;
                    if (1 === l && (s = !1),
                    s) {
                        const e = l - 1;
                        for (let t = 0; t < e; t++) {
                            const e = document.createElement("div");
                            e.className = "fake-chord",
                            a.push(e)
                        }
                        this.song.anacrusisPadding = e,
                        s = !1
                    }
                    const p = n === u || n === (0,
                    e.ZB)(u);
                    let f = !1;
                    const m = new r(d,o,p);
                    i[o] = m,
                    a.push(m.el),
                    this.checkMaxDuration(m, t.length),
                    f = h || m.isSimple(),
                    c = c && f,
                    this.hasWideChords = this.hasWideChords || !f && (0,
                    e.s2)(u, this.chordLang),
                    n = u
                }
                const l = document.createElement("div");
                return l.className = "chord",
                a.push(l),
                a
            }
            ;
            attachChordsToDOM = e => {
                const t = this.song
                  , r = t?.chords;
                if (void 0 === t || void 0 === r)
                    return console.error(new Error("Chordify.song missing"));
                const i = document.getElementById("chords");
                if (!i)
                    throw new Error("Chords div missing");
                i.classList.remove("loading"),
                i.classList.add(`barlength-${t.barLength}`),
                this.hasWideChords && i.classList.add("wide-chords"),
                i.innerHTML = "",
                e.forEach((e => i.appendChild(e))),
                i.scrollTo({
                    left: 0
                }),
                Object.values(r).forEach((e => e.checkOverflow()));
                const s = document.querySelector(".max-duration");
                if (!this.diagramsVisible && this.maxDurationReached && s instanceof HTMLElement) {
                    const e = document.getElementById("chordsArea")?.getBoundingClientRect().width;
                    s.style.width = `${e ?? -50}px`
                }
                this.setChordsLoaded(),
                t.canSimplify && this.updateOverflow(!0),
                this.player && this.player.handleChordsRendered(r[0].el);
                let n = window.innerWidth;
                window.addEventListener("resize", (0,
                o.sg)(( () => {
                    n !== window.innerWidth && (n = window.innerWidth,
                    this.updateOverflow())
                }
                ), 100, !1))
            }
            ;
            maxDurationReached = !1;
            checkMaxDuration = (e, t) => {
                if (void 0 === this.song)
                    return console.error(new Error("Chordify.song missing"));
                const r = e.idx + this.song.anacrusisPadding
                  , o = t + this.song.anacrusisPadding;
                if (!this.maxDurationReached && e.from > this.maxDuration && r % (4 * this.song.barLength) == 0 && r + 4 * this.song.barLength < o) {
                    this.maxDurationReached = !0;
                    const t = document.createElement("div");
                    t.className = "max-duration",
                    t.innerHTML = `<p>${Lang.max_duration}</p><a href="/premium" class="button-premium">${Lang.go_premium}</a>`;
                    const r = document.getElementById("chordsArea")?.getBoundingClientRect().width;
                    t.style.width = `${r ?? -50}px`,
                    e.el.append(t)
                }
                this.maxDurationReached && (e.setHidden(!0),
                e.el.style.setProperty("background", "rgba(250,250,250,0.5)", "important"))
            }
            ;
            setUserSongSettings = (t, r) => {
                const i = (0,
                e.sG)(r);
                this.transposeSetting = t.transpose ?? 0,
                this.transposeSetting = (0,
                o.LV)(this.transposeSetting, -5, 6),
                this.capoSetting = void 0 !== i ? t[i] ?? 0 : 0,
                this.dispatchEvent({
                    capo: this.capoSetting,
                    transpose: this.transposeSetting
                })
            }
            ;
            toggleCountOff = e => {
                if (this.countOffEnabled = e ?? !this.countOffEnabled,
                this.dispatchEvent({
                    countOff: this.countOffEnabled
                }),
                void 0 === this.player)
                    return console.error("this.player missing");
                this.player.loadMetronome()
            }
            ;
            updateOverflow = (t=!0) => {
                if (!Chordify.chordsLoaded)
                    return console.error("Chords not loaded");
                const r = Chordify.song.chords;
                Object.values(Chordify.song.chords).forEach((o => {
                    if (!t) {
                        const t = (0,
                        e.vS)(r)(o.idx + 1);
                        if (t && !t.isLastOnRow())
                            return
                    }
                    o.checkOverflow()
                }
                ))
            }
            ;
            editJSLoading = !1;
            toggleEdit = () => {
                if (!this.editJSLoading)
                    if (Chordify.editJSLoaded)
                        Chordify.edit.toggleEditMode();
                    else {
                        this.editJSLoading = !0,
                        document.createElement("script");
                        const e = document.querySelector("#lazy-jquery")
                          , t = document.querySelector("#editLazyCss")
                          , r = document.querySelector("#editLazyJs");
                        if (!t)
                            return console.error("Missing editCSS");
                        if (!r)
                            return console.error("Missing editBundle");
                        t.href = t.dataset.src ?? "";
                        const o = () => {
                            r.src = r.dataset.src ?? "",
                            r.addEventListener("load", ( () => {
                                this.editJSLoading = !1,
                                this.editJSLoaded = !0,
                                this.toggleEdit()
                            }
                            ))
                        }
                        ;
                        if (!e)
                            return void o();
                        e.src = e.dataset.src ?? "",
                        e.addEventListener("load", o)
                    }
            }
            ;
            toggleLyricsVisible = e => {
                this.lyricsVisible = e ?? !this.lyricsVisible,
                this.player?.updateSizes(),
                this.dispatchEvent({
                    lyrics: this.lyricsVisible
                })
            }
            ;
            offsetPositions = (e, t) => {
                if (!Chordify.chordsLoaded)
                    return console.error("Chords not loaded");
                const r = Chordify.song.chords;
                Object.values(r).forEach((r => {
                    r.left = (r.left ?? 0) + e,
                    r.top = (r.top ?? 0) + t
                }
                ))
            }
            ;
            resetPositions = () => {
                if (!Chordify.chordsLoaded)
                    return console.error("Chords not loaded");
                const e = Chordify.song.chords;
                Object.values(e).forEach((e => {
                    const r = (0,
                    t.cY)(e.el);
                    e.left = r.left,
                    e.top = r.top
                }
                ))
            }
            ;
            updateChordView = t => {
                this.doWhenChordsLoaded((r => {
                    let i = !(0,
                    o.yN)("version_id");
                    this.hasWideChords = !1;
                    let s = "";
                    Object.values(r.chords).forEach((r => {
                        !r.isRest() && t && r.updateLabel();
                        const o = r.currentViewHandle;
                        r.setHidden(o === s),
                        s = o,
                        i = i && r.isSimple(),
                        this.hasWideChords = this.hasWideChords || (0,
                        e.s2)(r.handle, this.chordLang)
                    }
                    ));
                    const n = document.getElementById("chords");
                    n?.classList.toggle("wide-chords", this.hasWideChords),
                    this.dispatchEvent({
                        chords: r.chords
                    })
                }
                ))
            }
            ;
            updateUserSongSettings = e => {
                Object.assign(this.userSongSettings, e)
            }
            ;
            utils = {
                parseChords: e.rI
            }
        }
        (window.chordifyLibraryProps);
        S.doWhenReactRendered((function() {
            if (S.playerInitialized && !S.dzSupport && -1 === location.pathname.indexOf("/embed/") && -1 === location.pathname.indexOf("/print/")) {
                const e = (0,
                L.Ri)("dzSupport");
                document.body.classList.contains("signedin") && "1" === e && (S.dzSupport = !0,
                document.body.classList.add("supports-deezer"),
                (0,
                L.Yj)("dzSupport"),
                fetch("/user/supportDeezer"))
            }
        }
        ))
    }
    )(),
    ( () => {
        s(5673),
        s(164),
        s(1279);
        var e = s(2313)
          , t = s(1635);
        function r(e) {
            const t = e.target.name;
            o.forEach((e => e.classList.remove("active"))),
            Chordify.changeInstrument(t),
            d(),
            document.querySelector(`.instruments button[name="${t}"]`)?.classList.add("active")
        }
        Chordify.instrument = initialInstrument ?? "guitar",
        Chordify.changeView("diagrams");
        const o = document.querySelectorAll(".instruments button");
        function i(e) {
            const t = e.target.name;
            Chordify.changeView(t),
            n.forEach((e => e.classList.remove("active"))),
            document.querySelector(`#viewToggle button[name="${t}"]`)?.classList.add("active"),
            "diagrams" === t && d()
        }
        o.forEach((e => e.addEventListener("click", r)));
        const n = document.querySelectorAll("#viewToggle button");
        n.forEach((e => e.addEventListener("click", i))),
        document.querySelector("button.button-play")?.addEventListener("click", (function() {
            window.Chordify.player?.handleControlClick("play")
        }
        )),
        document.addEventListener("ChordifyLibrary", (function(e) {
            const {detail: t} = e;
            if (t.player && t.player.event) {
                const e = document.querySelector("button.button-play span");
                "play" === t.player.event ? (e?.classList.remove("icon-caret-right"),
                e?.classList.add("icon-pause")) : (e?.classList.remove("icon-pause"),
                e?.classList.add("icon-caret-right"))
            }
        }
        ));
        const a = {
            guitar: "0 0 326 281",
            mandolin: "0 0 254 281",
            piano: "0 0 506 225",
            ukulele: "0 0 254 281"
        }
          , d = () => Chordify.doWhenChordsLoaded((t => {
            if (void 0 === Chordify.instrument)
                return;
            const r = document.querySelector("#diagrams");
            if (!r)
                throw new Error("missing diagram element");
            r.innerHTML = "";
            const o = {};
            Object.values(t.chords).filter((e => !e.hidden)).forEach((t => {
                const i = (t => {
                    if (void 0 === Chordify.instrument)
                        return console.error("instrument missing"),
                        null;
                    if (t.isRest()) {
                        const e = document.createElement("div");
                        return e.className = `diagram d-${t.idx}`,
                        e.dataset.i = t.idx.toString(),
                        e.innerHTML = '<span class="icon-rest"></span>',
                        e
                    }
                    const r = document.querySelector("#user-data")?.dataset.orientation ?? "right"
                      , i = t.currentViewHandle
                      , s = ( (t, r, o) => {
                        if ("N" === t) {
                            const e = document.createElement("div");
                            return e.className = "diagram",
                            e.innerHTML = '<span class="icon-rest"></span>',
                            e
                        }
                        const i = encodeURIComponent(t.replace("/", encodeURIComponent("/")))
                          , s = /^((?!chrome|android).)*safari/i.test(navigator.userAgent)
                          , n = new URLSearchParams;
                        n.append("handedness", o ?? "right"),
                        s && n.append("inline_components", "true");
                        const d = `https://chordify.net/api/v2/diagrams/instruments/${r}/chords/${i}?${n.toString()}#chord`
                          , h = document.createElement("div");
                        h.className = `diagram ${t}`,
                        h.innerHTML = `<svg alt="${t}" viewBox="${a[r]}"><use href="${d}"></use></svg>`;
                        const c = (0,
                        e.y$)(t, Chordify.chordLang)
                          , l = document.createElement("div");
                        return l.innerHTML = `${c.label}${c.bass ?? ""}`,
                        l.className = "chord-label",
                        h.append(l),
                        h
                    }
                    )(i, Chordify.instrument, r);
                    return void 0 === o[i] && (o[i] = 1,
                    s.classList.add("diagram-in-overview")),
                    s.classList.add(`d-${t.idx}`),
                    s.dataset.i = t.idx.toString(),
                    s
                }
                )(t);
                i && (r.append(i),
                i.addEventListener("click", l))
            }
            )),
            r.classList.remove("diagrams-guitar", "diagrams-piano", "diagrams-ukulele"),
            r.classList.add(`diagrams-${Chordify.instrument}`),
            r.classList.toggle("diagrams-overview", "summary" === Chordify.diagramView);
            const i = document.querySelector(".currentChord");
            i && u(i, !0),
            function() {
                if (void 0 === Chordify.player)
                    return console.error("Chordify.player missing");
                const e = document.querySelector("#diagrams");
                !c && Chordify.diagramsVisible && e && (c = !0,
                window.document.addEventListener("ChordifyLibrary", (function(e) {
                    void 0 !== e.detail.chordChange && u(e.detail.chordChange.chordEl)
                }
                )))
            }()
        }
        ));
        d();
        let h, c = !1;
        function l(t) {
            if (!(t.target instanceof Element))
                return;
            if (void 0 === Chordify.player)
                return console.error("Chordify.player missing");
            if (!Chordify.chordsLoaded)
                return console.error("Chords not loaded");
            const r = t.target.closest(".diagram")?.dataset.i
              , o = void 0 !== r ? (0,
            e.vS)(Chordify.song.chords)(parseInt(r, 10)) : void 0;
            void 0 !== o && (u(o.el),
            Chordify.player.play(o.el))
        }
        function u(e, r=!1) {
            const o = document.querySelector("#diagrams");
            if (Chordify.diagramsVisible && Chordify.song && !Chordify.noPlayerSync && o && (r || h !== e.dataset.handle)) {
                let r = parseInt(e.dataset.i ?? "0", 10)
                  , i = o.querySelector(`.d-${r}`);
                if (!i)
                    for (; r-- && (i = o.querySelector(`.d-${r}`),
                    !(r < 0 || null !== i)); )
                        ;
                if (null === i)
                    return;
                const s = (0,
                t.cY)(i).left
                  , n = (0,
                t.cY)(o).left;
                if (document.querySelector(".diagram-current")?.classList.remove("diagram-current"),
                window.innerWidth < 950) {
                    const e = o.scrollLeft + s - n - 30;
                    o.scrollTo({
                        left: e,
                        behavior: "smooth"
                    })
                } else {
                    const e = o.scrollLeft + s - n - i.offsetWidth - 70;
                    o.scrollTo({
                        left: e,
                        behavior: "smooth"
                    })
                }
                i.classList.add("diagram-current"),
                h = e.dataset.handle
            }
        }
        const p = document.querySelector("#song")?.dataset;
        Chordify.initPlayer({
            externalid: p?.externalid ?? "",
            pseudoid: p?.pseudoid ?? "",
            stream: p?.stream ?? "",
            type: p?.type ?? "youtube",
            ytCtrl: !1
        }),
        (async function(data) {
    try {
        const i = (0, e.rI)(data.chords);
        Chordify.initSong({
            ...data,
            chords: i
        }, "advanced");
    } catch {
        document.querySelector("#song")?.append(Lang.no_rights);
    }
})(chordData);

Chordify.dispatchReactRenderedEvent();
    }
    )()
}
)();
//# sourceMappingURL=embed-lib-bundle.js.map
